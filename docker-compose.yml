version: '3.8'

services:
  # PostgreSQL 데이터베이스 (메타데이터 저장용)
  postgres:
    image: postgres:15
    container_name: ai-dbagent-postgres
    environment:
      POSTGRES_DB: dbagent
      POSTGRES_USER: dbagentuser
      POSTGRES_PASSWORD: supersecret
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - dbagent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbagentuser -d dbagent"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI DBAgent 애플리케이션
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: ai-dbagent-app
    env_file:
      - .env.docker
    environment:
      # 추가 환경 변수 (필요 시)
      - CONTAINER_NAME=ai-dbagent-app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dbagent-network
    volumes:
      - ./logs:/app/logs
      # MCP 설정 파일 볼륨 (호스트에서 컨테이너로 마운트)
      - ./.kiro:/app/.kiro
      # uv 캐시 볼륨 (MCP 서버 다운로드 캐시)
      - uv_cache:/app/.uv-cache
      # 로컬 환경 변수 파일 (선택사항)
      - ./.env:/app/.env:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (캐싱 및 세션 저장용, 선택사항)
  redis:
    image: redis:7-alpine
    container_name: ai-dbagent-redis
    ports:
      - "6379:6379"
    networks:
      - dbagent-network
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  uv_cache:

networks:
  dbagent-network:
    driver: bridge