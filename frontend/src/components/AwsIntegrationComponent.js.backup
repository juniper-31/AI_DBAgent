// AwsIntegrationComponent.js
// AWS 인증, RDS/CloudWatch 연동, 상태 표시
import React, { useState, useEffect } from 'react';

function AwsIntegrationComponent({ selectedDb, databases }) {
  const [authType, setAuthType] = useState('accessKey');
  const [accessKey, setAccessKey] = useState('');
  const [secretKey, setSecretKey] = useState('');
  const [sessionToken, setSessionToken] = useState('');
  const [ssoStartUrl, setSsoStartUrl] = useState('');
  const [ssoRegion, setSsoRegion] = useState('ap-northeast-2');
  const [ssoAccountId, setSsoAccountId] = useState('');
  const [ssoRoleName, setSsoRoleName] = useState('');
  const [awsRegion, setAwsRegion] = useState('us-east-1');
  const [cloudwatchNamespace, setCloudwatchNamespace] = useState('AWS/RDS');
  const [isConnected, setIsConnected] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState('disconnected');
  const [rdsInstances, setRdsInstances] = useState([]);
  const [cloudwatchMetrics, setCloudwatchMetrics] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const awsRegions = [
    { value: 'us-east-1', label: 'US East (N. Virginia)' },
    { value: 'us-east-2', label: 'US East (Ohio)' },
    { value: 'us-west-1', label: 'US West (N. California)' },
    { value: 'us-west-2', label: 'US West (Oregon)' },
    { value: 'ap-northeast-1', label: 'Asia Pacific (Tokyo)' },
    { value: 'ap-northeast-2', label: 'Asia Pacific (Seoul)' },
    { value: 'ap-southeast-1', label: 'Asia Pacific (Singapore)' },
    { value: 'ap-southeast-2', label: 'Asia Pacific (Sydney)' },
    { value: 'eu-west-1', label: 'Europe (Ireland)' },
    { value: 'eu-central-1', label: 'Europe (Frankfurt)' }
  ];

  // 인증 방식 옵션
  const authTypes = [
    { value: 'accessKey', label: 'Access Key' },
    { value: 'iamRole', label: 'IAM Role (EC2/ECS/EKS)' },
    { value: 'sso', label: 'AWS SSO' }
  ];

  // AWS 설정 로드
  useEffect(() => {
    loadAwsConfig();
  }, []);

  // AWS 설정 로드
  const loadAwsConfig = async () => {
    try {
      const response = await fetch('/aws/auth');
      if (response.ok) {
        const config = await response.json();
        setAuthType(config.authType || 'accessKey');
        setAccessKey(config.accessKey || '');
        setSecretKey(config.secretKey || '');
        setSessionToken(config.sessionToken || '');
        setSsoStartUrl(config.ssoStartUrl || '');
        setSsoRegion(config.ssoRegion || 'ap-northeast-2');
        setSsoAccountId(config.ssoAccountId || '');
        setSsoRoleName(config.ssoRoleName || '');
        setAwsRegion(config.region || 'us-east-1');
        setCloudwatchNamespace(config.cloudwatchNamespace || 'AWS/RDS');
        setIsConnected(config.is_configured || false);
        setConnectionStatus(config.is_configured ? 'connected' : 'disconnected');
      }
    } catch (error) {
      console.error('AWS 설정 로드 오류:', error);
    }
  };

  // 연결 테스트/저장 함수에서 fetch body를 JSON.stringify(getAuthPayload())로 변경
  const handleTest = async (payload) => {
    setError('');
    setSuccess('');
    setLoading(true);
    try {
      const response = await fetch('/aws/auth/test', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
        credentials: 'include'
      });
      if (!response.ok) throw new Error('연결실패');
      const data = await response.json();
      if (data.success) {
        setSuccess('연결 성공!');
      } else {
        setError('연결 실패: ' + (data.message || '오류'));
      }
    } catch (e) {
      setError('연결 테스트 중 오류가 발생했습니다.');
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async (payload) => {
    setError('');
    setSuccess('');
    setLoading(true);
    try {
      const response = await fetch('/aws/auth', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
        credentials: 'include'
      });
      const data = await response.json();
      if (data.success) {
        setSuccess('설정이 저장되었습니다!');
      } else {
        setError('저장 실패: ' + (data.message || '오류'));
      }
    } catch (e) {
      setError('설정 저장 중 오류가 발생했습니다.');
    } finally {
      setLoading(false);
    }
  };

  // RDS 인스턴스 목록 가져오기
  const fetchRdsInstances = async () => {
    if (!isConnected) return;

    setLoading(true);
    try {
      const response = await fetch('/aws/rds-instances');
      if (response.ok) {
        const data = await response.json();
        setRdsInstances(data.instances || []);
      } else {
        console.error('RDS 인스턴스 목록 가져오기 실패');
      }
    } catch (error) {
      console.error('RDS 인스턴스 요청 오류:', error);
    } finally {
      setLoading(false);
    }
  };

  // CloudWatch 메트릭 가져오기
  const fetchCloudWatchMetrics = async () => {
    if (!isConnected || !awsRegion) return;

    setLoading(true);
    try {
      const params = new URLSearchParams({
        region: awsRegion,
        namespace: cloudwatchNamespace
      });

      const response = await fetch(`/aws/cloudwatch/metrics?${params}`);
      if (response.ok) {
        const data = await response.json();
        setCloudwatchMetrics(data.metrics || {});
      } else {
        console.error('CloudWatch 메트릭 가져오기 실패');
      }
    } catch (error) {
      console.error('CloudWatch 메트릭 요청 오류:', error);
    } finally {
      setLoading(false);
    }
  };

  // 입력 필드 변경 처리
  const handleInputChange = (key, value) => {
    if (key === 'accessKey') setAccessKey(value);
    else if (key === 'secretKey') setSecretKey(value);
    else if (key === 'sessionToken') setSessionToken(value);
    else if (key === 'ssoStartUrl') setSsoStartUrl(value);
    else if (key === 'ssoRegion') setSsoRegion(value);
    else if (key === 'ssoAccountId') setSsoAccountId(value);
    else if (key === 'ssoRoleName') setSsoRoleName(value);
    else if (key === 'awsRegion') setAwsRegion(value);
    else if (key === 'cloudwatchNamespace') setCloudwatchNamespace(value);
  };

  // RDS 인스턴스 선택
  const handleRdsInstanceSelect = (instanceId) => {
    handleInputChange('rds_instance_id', instanceId);
  };

  // 연결 상태에 따른 색상
  const getStatusColor = (status) => {
    switch (status) {
      case 'connected':
        return '#28a745';
      case 'connecting':
        return '#ffc107';
      case 'error':
        return '#dc3545';
      default:
        return '#6c757d';
    }
  };

  // 메트릭 카드 렌더링
  const renderMetricCard = (title, value, unit = '', status = null) => (
    <div className="metric-card">
      <div className="metric-header">
        <h4>{title}</h4>
        {status && (
          <span 
            className="status-badge"
            style={{ backgroundColor: getStatusColor(status) }}
          >
            {status}
          </span>
        )}
      </div>
      <div className="metric-value">
        <span className="value">{value}</span>
        {unit && <span className="unit">{unit}</span>}
      </div>
    </div>
  );

  // getAuthPayload 함수도 iamRole 처리 추가
  const getAuthPayload = () => {
    if (authType === 'accessKey') {
      return {
        authType,
        accessKey,
        secretKey,
        sessionToken,
        awsRegion,
        cloudwatchNamespace
      };
    } else if (authType === 'iamRole') {
      return {
        authType,
        awsRegion,
        cloudwatchNamespace
      };
    } else {
      return {
        authType,
        ssoStartUrl,
        ssoRegion,
        ssoAccountId,
        ssoRoleName,
        awsRegion,
        cloudwatchNamespace
      };
    }
  };

  return (
    <div className="aws-integration-component">
      {/* 헤더 */}
      <div className="component-header">
        <div className="header-left">
          <h2>AWS 통합</h2>
          <div className="connection-status">
            <span 
              className="status-indicator"
              style={{ backgroundColor: getStatusColor(connectionStatus) }}
            ></span>
            <span className="status-text">
              {connectionStatus === 'connected' && '연결됨'}
              {connectionStatus === 'connecting' && '연결 중...'}
              {connectionStatus === 'error' && '연결 오류'}
              {connectionStatus === 'disconnected' && '연결 안됨'}
            </span>
          </div>
        </div>
      </div>

      {/* AWS 설정 */}
      <div className="aws-config-section">
        <h3>AWS 인증 설정</h3>
        
        {error && (
          <div className="error-message">{error}</div>
        )}

        <div className="form-group">
          <label htmlFor="auth-type">인증 방식</label>
          <select
            id="auth-type"
            value={authType}
            onChange={(e) => setAuthType(e.target.value)}
            className="form-control wide-input"
          >
            {authTypes.map(type => (
              <option key={type.value} value={type.value}>{type.label}</option>
            ))}
          </select>
        </div>

        {authType === 'accessKey' && (
          <>
            <div className="form-group">
              <label htmlFor="access-key">Access Key *</label>
              <input
                type="text"
                id="access-key"
                value={accessKey}
                onChange={e => setAccessKey(e.target.value)}
                placeholder="AKIA..."
                className="form-control wide-input"
              />
            </div>
            <div className="form-group">
              <label htmlFor="secret-key">Secret Key *</label>
              <input
                type="password"
                id="secret-key"
                value={secretKey}
                onChange={e => setSecretKey(e.target.value)}
                placeholder="••••••••••••••••••••••••••••••••"
                className="form-control wide-input"
              />
            </div>
            <div className="form-group">
              <label htmlFor="session-token">Session Token (옵션)</label>
              <input
                type="text"
                id="session-token"
                value={sessionToken}
                onChange={e => setSessionToken(e.target.value)}
                placeholder="세션 토큰 (필요시)"
                className="form-control wide-input"
              />
            </div>
          </>
        )}

        {authType === 'iamRole' && (
          <div className="form-group">
            <label>IAM Role 기반 인증</label>
            <div style={{ color: '#888', fontSize: '14px' }}>
              EC2/ECS/EKS 인스턴스에 할당된 IAM Role을 자동으로 사용합니다.<br />
              별도의 키 입력 없이 진행하세요.
            </div>
          </div>
        )}

        {authType === 'sso' && (
          <div className="config-form">
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="sso-start-url">SSO Start URL *</label>
                <input
                  type="text"
                  id="sso-start-url"
                  value={ssoStartUrl}
                  onChange={(e) => handleInputChange('sso-start-url', e.target.value)}
                  placeholder="https://your-sso-portal.awsapps.com/start"
                  className="form-control wide-input"
                />
              </div>
              <div className="form-group">
                <label htmlFor="sso-region">SSO Region *</label>
                <input
                  type="text"
                  id="sso-region"
                  value={ssoRegion}
                  onChange={(e) => handleInputChange('sso-region', e.target.value)}
                  placeholder="ap-northeast-2"
                  className="form-control wide-input"
                />
              </div>
            </div>
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="sso-account-id">SSO Account ID *</label>
                <input
                  type="text"
                  id="sso-account-id"
                  value={ssoAccountId}
                  onChange={(e) => handleInputChange('sso-account-id', e.target.value)}
                  placeholder="123456789012"
                  className="form-control wide-input"
                />
              </div>
              <div className="form-group">
                <label htmlFor="sso-role-name">SSO Role Name *</label>
                <input
                  type="text"
                  id="sso-role-name"
                  value={ssoRoleName}
                  onChange={(e) => handleInputChange('sso-role-name', e.target.value)}
                  placeholder="AWSAdministratorAccess"
                  className="form-control wide-input"
                />
              </div>
            </div>
          </div>
        )}

        <div className="form-row">
          <div className="form-group">
            <label htmlFor="aws-region">AWS 리전</label>
            <select
              id="aws-region"
              value={awsRegion}
              onChange={(e) => setAwsRegion(e.target.value)}
              className="form-control wide-input"
            >
              {awsRegions.map(region => (
                <option key={region.value} value={region.value}>
                  {region.label}
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className="form-actions">
          <button 
            onClick={() => handleTest(getAuthPayload())}
            disabled={loading}
            className="btn btn-outline"
          >
            {loading ? '테스트 중...' : '🔗 연결 테스트'}
          </button>
          
          <button 
            onClick={() => handleSave(getAuthPayload())}
            disabled={loading}
            className="btn btn-primary"
          >
            {loading ? '저장 중...' : '💾 설정 저장'}
          </button>
        </div>
      </div>

      {/* RDS 인스턴스 관리 */}
      {isConnected && (
        <div className="rds-section">
          <div className="section-header">
            <h3>RDS 인스턴스 관리</h3>
            <button 
              onClick={fetchRdsInstances}
              disabled={loading}
              className="btn btn-outline"
            >
              {loading ? '로딩 중...' : '🔄 인스턴스 목록 새로고침'}
            </button>
          </div>

          <div className="form-group">
            <label htmlFor="rds_instance_id">RDS 인스턴스 선택</label>
            <select
              id="rds_instance_id"
              value={selectedDb}
              onChange={(e) => handleRdsInstanceSelect(e.target.value)}
              className="form-control wide-input"
            >
              <option value="">인스턴스를 선택하세요</option>
              {rdsInstances.map(instance => (
                <option key={instance.DBInstanceIdentifier} value={instance.DBInstanceIdentifier}>
                  {instance.DBInstanceIdentifier} ({instance.DBInstanceClass}) - {instance.DBInstanceStatus}
                </option>
              ))}
            </select>
          </div>

          {selectedDb && (
            <div className="instance-info">
              <h4>선택된 인스턴스 정보</h4>
              {rdsInstances.find(i => i.DBInstanceIdentifier === selectedDb) && (
                <div className="info-grid">
                  <div className="info-item">
                    <label>인스턴스 ID:</label>
                    <span>{selectedDb}</span>
                  </div>
                  <div className="info-item">
                    <label>엔진:</label>
                    <span>{rdsInstances.find(i => i.DBInstanceIdentifier === selectedDb)?.Engine}</span>
                  </div>
                  <div className="info-item">
                    <label>상태:</label>
                    <span>{rdsInstances.find(i => i.DBInstanceIdentifier === selectedDb)?.DBInstanceStatus}</span>
                  </div>
                  <div className="info-item">
                    <label>엔드포인트:</label>
                    <span>{rdsInstances.find(i => i.DBInstanceIdentifier === selectedDb)?.Endpoint?.Address}</span>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      )}

      {/* CloudWatch 메트릭 */}
      {isConnected && selectedDb && (
        <div className="cloudwatch-section">
          <div className="section-header">
            <h3>CloudWatch 메트릭</h3>
            <button 
              onClick={fetchCloudWatchMetrics}
              disabled={loading}
              className="btn btn-outline"
            >
              {loading ? '로딩 중...' : '📊 메트릭 새로고침'}
            </button>
          </div>

          <div className="metrics-grid">
            {renderMetricCard(
              'CPU 사용률',
              cloudwatchMetrics.cpu_utilization || 0,
              '%',
              cloudwatchMetrics.cpu_utilization > 80 ? 'warning' : 'ok'
            )}
            
            {renderMetricCard(
              '메모리 사용률',
              cloudwatchMetrics.freeable_memory || 0,
              'MB',
              cloudwatchMetrics.freeable_memory < 1000 ? 'warning' : 'ok'
            )}
            
            {renderMetricCard(
              '연결 수',
              cloudwatchMetrics.database_connections || 0,
              '개',
              cloudwatchMetrics.database_connections > 100 ? 'warning' : 'ok'
            )}
            
            {renderMetricCard(
              '읽기 IOPS',
              cloudwatchMetrics.read_iops || 0,
              'IOPS',
              null
            )}
            
            {renderMetricCard(
              '쓰기 IOPS',
              cloudwatchMetrics.write_iops || 0,
              'IOPS',
              null
            )}
            
            {renderMetricCard(
              '네트워크 처리량',
              cloudwatchMetrics.network_receive_throughput || 0,
              'MB/s',
              null
            )}
          </div>

          {/* 메트릭 차트 (간단한 표 형태) */}
          {Object.keys(cloudwatchMetrics).length > 0 && (
            <div className="metrics-table">
              <h4>상세 메트릭</h4>
              <table className="table">
                <thead>
                  <tr>
                    <th>메트릭명</th>
                    <th>값</th>
                    <th>단위</th>
                    <th>상태</th>
                  </tr>
                </thead>
                <tbody>
                  {Object.entries(cloudwatchMetrics).map(([key, value]) => (
                    <tr key={key}>
                      <td>{key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}</td>
                      <td>{typeof value === 'number' ? value.toFixed(2) : value}</td>
                      <td>{getMetricUnit(key)}</td>
                      <td>
                        <span 
                          className="status-badge"
                          style={{ backgroundColor: getMetricStatusColor(key, value) }}
                        >
                          {getMetricStatus(key, value)}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      )}

      {/* 보안 주의사항 */}
      <div className="security-notice">
        <h4>🔒 보안 주의사항</h4>
        <ul>
          <li>AWS 자격 증명은 안전하게 암호화되어 저장됩니다.</li>
          <li>최소 권한 원칙에 따라 필요한 권한만 부여하세요.</li>
          <li>정기적으로 액세스 키를 교체하는 것을 권장합니다.</li>
          <li>프로덕션 환경에서는 IAM 역할 사용을 고려하세요.</li>
        </ul>
      </div>
    </div>
  );
}

// 메트릭 단위 반환
const getMetricUnit = (metricName) => {
  const units = {
    cpu_utilization: '%',
    freeable_memory: 'MB',
    database_connections: '개',
    read_iops: 'IOPS',
    write_iops: 'IOPS',
    network_receive_throughput: 'MB/s',
    network_transmit_throughput: 'MB/s'
  };
  return units[metricName] || '';
};

// 메트릭 상태 색상 반환
const getMetricStatusColor = (metricName, value) => {
  if (metricName === 'cpu_utilization' && value > 80) return '#ffc107';
  if (metricName === 'freeable_memory' && value < 1000) return '#ffc107';
  if (metricName === 'database_connections' && value > 100) return '#ffc107';
  return '#28a745';
};

// 메트릭 상태 반환
const getMetricStatus = (metricName, value) => {
  if (metricName === 'cpu_utilization' && value > 80) return 'warning';
  if (metricName === 'freeable_memory' && value < 1000) return 'warning';
  if (metricName === 'database_connections' && value > 100) return 'warning';
  return 'ok';
};

export default AwsIntegrationComponent; 