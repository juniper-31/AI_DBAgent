{"ast":null,"code":"var _jsxFileName = \"/Users/bskong/Repository/test/db-agent/frontend/src/components/MonitoringComponent.js\",\n  _s = $RefreshSig$();\n// MonitoringComponent.js\n// DB별 실시간 모니터링, 차트, 상세 페이지\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLOUDWATCH_METRICS = [{\n  key: 'connections',\n  name: 'DatabaseConnections',\n  label: '연결 수',\n  unit: '개',\n  color: '#007bff'\n}, {\n  key: 'cpu',\n  name: 'CPUUtilization',\n  label: 'CPU 사용률',\n  unit: '%',\n  color: '#28a745'\n}, {\n  key: 'memory',\n  name: 'FreeableMemory',\n  label: '사용 가능 메모리',\n  unit: 'MB',\n  color: '#ffc107'\n}, {\n  key: 'storage',\n  name: 'FreeStorageSpace',\n  label: '사용 가능 스토리지',\n  unit: 'GB',\n  color: '#6f42c1'\n}, {\n  key: 'read_iops',\n  name: 'ReadIOPS',\n  label: '읽기 IOPS',\n  unit: '',\n  color: '#17a2b8'\n}, {\n  key: 'write_iops',\n  name: 'WriteIOPS',\n  label: '쓰기 IOPS',\n  unit: '',\n  color: '#fd7e14'\n}];\nfunction MonitoringComponent({\n  selectedDb,\n  databases,\n  onDbChange\n}) {\n  _s();\n  const [metrics, setMetrics] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [timeRange, setTimeRange] = useState('1h');\n  const [refreshInterval, setRefreshInterval] = useState(30);\n  const [isAutoRefresh, setIsAutoRefresh] = useState(true);\n  const intervalRef = useRef(null);\n  const timeRanges = [{\n    value: '1h',\n    label: '1시간'\n  }, {\n    value: '6h',\n    label: '6시간'\n  }, {\n    value: '24h',\n    label: '24시간'\n  }, {\n    value: '7d',\n    label: '7일'\n  }];\n  const refreshIntervals = [{\n    value: 10,\n    label: '10초'\n  }, {\n    value: 30,\n    label: '30초'\n  }, {\n    value: 60,\n    label: '1분'\n  }, {\n    value: 300,\n    label: '5분'\n  }];\n\n  // 시간 범위 → hours 변환\n  const getHours = range => {\n    switch (range) {\n      case '1h':\n        return 1;\n      case '6h':\n        return 6;\n      case '24h':\n        return 24;\n      case '7d':\n        return 24 * 7;\n      default:\n        return 1;\n    }\n  };\n\n  // CloudWatch 메트릭 데이터 가져오기\n  const fetchCloudwatchMetrics = useCallback(async () => {\n    if (!selectedDb) return;\n    setLoading(true);\n    try {\n      const dbIdentifier = selectedDb;\n      const hours = getHours(timeRange);\n      const results = await Promise.all(CLOUDWATCH_METRICS.map(async metric => {\n        const url = `/api/monitoring/cloudwatch/metrics/${dbIdentifier}?metric_name=${metric.name}&hours=${hours}`;\n        const res = await fetch(url);\n        let json = {\n          data: []\n        };\n        try {\n          json = await res.json();\n        } catch (e) {}\n        // 콘솔에 응답(raw) 출력\n        console.log(`[CloudWatch][${metric.name}]`, json);\n        if (!res.ok) return {\n          key: metric.key,\n          data: []\n        };\n        return {\n          key: metric.key,\n          data: json.data || []\n        };\n      }));\n      const newMetrics = {};\n      results.forEach(({\n        key,\n        data\n      }) => {\n        newMetrics[key] = data;\n      });\n      setMetrics(newMetrics);\n    } catch (error) {\n      console.error('CloudWatch 메트릭 요청 오류:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [selectedDb, timeRange]);\n\n  // 자동 새로고침\n  useEffect(() => {\n    if (isAutoRefresh && selectedDb) {\n      fetchCloudwatchMetrics();\n      intervalRef.current = setInterval(() => {\n        fetchCloudwatchMetrics();\n      }, refreshInterval * 1000);\n      return () => {\n        if (intervalRef.current) clearInterval(intervalRef.current);\n      };\n    } else {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    }\n  }, [selectedDb, timeRange, refreshInterval, isAutoRefresh, fetchCloudwatchMetrics]);\n\n  // 수동 새로고침\n  const handleManualRefresh = () => {\n    fetchCloudwatchMetrics();\n  };\n\n  // 차트 데이터 포맷팅\n  const formatChartData = (data, metricKey) => {\n    if (!data || !Array.isArray(data)) return [];\n    // 메모리/스토리지는 단위 변환\n    if (metricKey === 'memory') {\n      return data.map(point => ({\n        x: new Date(point.timestamp),\n        y: Math.round(point.value / 1024 / 1024)\n      })); // MB\n    }\n    if (metricKey === 'storage') {\n      return data.map(point => ({\n        x: new Date(point.timestamp),\n        y: Math.round(point.value / 1024 / 1024 / 1024)\n      })); // GB\n    }\n    return data.map(point => ({\n      x: new Date(point.timestamp),\n      y: point.value\n    }));\n  };\n\n  // 카드/차트 UI 개선\n  const renderMetricCard = (title, value, unit = '', color = '#007bff') => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"metric-card improved\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metric-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          color\n        },\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metric-value\",\n      children: [value === null || value === undefined || isNaN(value) ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-data\",\n        children: \"\\uB370\\uC774\\uD130 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"value\",\n        style: {\n          color\n        },\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), unit && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unit\",\n        children: unit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n  const renderChart = (title, data, color = '#007bff', unit = '') => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-card improved\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        color\n      },\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [!data || data.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-data\",\n        children: \"\\uB370\\uC774\\uD130 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"100%\",\n        height: \"200\",\n        viewBox: \"0 0 400 200\",\n        children: [data.length > 1 && /*#__PURE__*/_jsxDEV(\"polyline\", {\n          fill: \"none\",\n          stroke: color,\n          strokeWidth: \"2\",\n          points: data.map((point, i) => `${i / (data.length - 1) * 400},${200 - point.y / Math.max(...(data.map(p => p.y) || [1])) * 180}`).join(' ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this), data.map((point, i) => /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: i / (data.length - 1) * 400,\n          cy: 200 - point.y / Math.max(...(data.map(p => p.y) || [1])) * 180,\n          r: \"3\",\n          fill: color\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), unit && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-unit\",\n        children: [\"(\", unit, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"monitoring-component improved\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"monitoring-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uB370\\uC774\\uD130\\uBCA0\\uC774\\uC2A4 \\uBAA8\\uB2C8\\uD130\\uB9C1 (CloudWatch)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), selectedDb && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"selected-db\",\n          children: [\"\\uC120\\uD0DD\\uB41C DB: \", selectedDb]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedDb || '',\n          onChange: e => onDbChange(e.target.value),\n          className: \"db-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"DB \\uC120\\uD0DD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), databases === null || databases === void 0 ? void 0 : databases.map(db => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: db.name,\n            children: db.name\n          }, db.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: timeRange,\n          onChange: e => setTimeRange(e.target.value),\n          className: \"time-range-select\",\n          children: timeRanges.map(range => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: range.value,\n            children: range.label\n          }, range.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: refreshInterval,\n          onChange: e => setRefreshInterval(Number(e.target.value)),\n          className: \"refresh-interval-select\",\n          children: refreshIntervals.map(interval => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: interval.value,\n            children: interval.label\n          }, interval.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"auto-refresh-toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: isAutoRefresh,\n            onChange: e => setIsAutoRefresh(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), \"\\uC790\\uB3D9 \\uC0C8\\uB85C\\uACE0\\uCE68\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleManualRefresh,\n          disabled: loading || !selectedDb,\n          className: \"btn btn-outline\",\n          children: loading ? '새로고침 중...' : '🔄 새로고침'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), !selectedDb ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-db-selected\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uBAA8\\uB2C8\\uD130\\uB9C1\\uD560 \\uB370\\uC774\\uD130\\uBCA0\\uC774\\uC2A4\\uB97C \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"monitoring-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metrics-grid improved\",\n        children: CLOUDWATCH_METRICS.map(metric => {\n          const data = metrics[metric.key] || [];\n          const latest = data.length > 0 ? data[data.length - 1].value : null;\n          let displayValue = latest;\n          if (metric.key === 'memory' && latest !== null) displayValue = Math.round(latest); // MB\n          if (metric.key === 'storage' && latest !== null) displayValue = Math.round(latest); // GB\n          return renderMetricCard(metric.label, displayValue, metric.unit, metric.color);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"charts-grid improved\",\n        children: CLOUDWATCH_METRICS.map(metric => {\n          const data = formatChartData(metrics[metric.key], metric.key);\n          return renderChart(metric.label, data, metric.color, metric.unit);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n_s(MonitoringComponent, \"jtW2kP49UdoXyPXQKj8kMo8e2z0=\");\n_c = MonitoringComponent;\nexport default MonitoringComponent;\nvar _c;\n$RefreshReg$(_c, \"MonitoringComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","CLOUDWATCH_METRICS","key","name","label","unit","color","MonitoringComponent","selectedDb","databases","onDbChange","_s","metrics","setMetrics","loading","setLoading","timeRange","setTimeRange","refreshInterval","setRefreshInterval","isAutoRefresh","setIsAutoRefresh","intervalRef","timeRanges","value","refreshIntervals","getHours","range","fetchCloudwatchMetrics","dbIdentifier","hours","results","Promise","all","map","metric","url","res","fetch","json","data","e","console","log","ok","newMetrics","forEach","error","current","setInterval","clearInterval","handleManualRefresh","formatChartData","metricKey","Array","isArray","point","x","Date","timestamp","y","Math","round","renderMetricCard","title","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","undefined","isNaN","renderChart","length","width","height","viewBox","fill","stroke","strokeWidth","points","i","max","p","join","cx","cy","r","onChange","target","db","Number","interval","type","checked","onClick","disabled","latest","displayValue","_c","$RefreshReg$"],"sources":["/Users/bskong/Repository/test/db-agent/frontend/src/components/MonitoringComponent.js"],"sourcesContent":["// MonitoringComponent.js\n// DB별 실시간 모니터링, 차트, 상세 페이지\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\n\nconst CLOUDWATCH_METRICS = [\n  { key: 'connections', name: 'DatabaseConnections', label: '연결 수', unit: '개', color: '#007bff' },\n  { key: 'cpu', name: 'CPUUtilization', label: 'CPU 사용률', unit: '%', color: '#28a745' },\n  { key: 'memory', name: 'FreeableMemory', label: '사용 가능 메모리', unit: 'MB', color: '#ffc107' },\n  { key: 'storage', name: 'FreeStorageSpace', label: '사용 가능 스토리지', unit: 'GB', color: '#6f42c1' },\n  { key: 'read_iops', name: 'ReadIOPS', label: '읽기 IOPS', unit: '', color: '#17a2b8' },\n  { key: 'write_iops', name: 'WriteIOPS', label: '쓰기 IOPS', unit: '', color: '#fd7e14' }\n];\n\nfunction MonitoringComponent({ selectedDb, databases, onDbChange }) {\n  const [metrics, setMetrics] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [timeRange, setTimeRange] = useState('1h');\n  const [refreshInterval, setRefreshInterval] = useState(30);\n  const [isAutoRefresh, setIsAutoRefresh] = useState(true);\n  const intervalRef = useRef(null);\n\n  const timeRanges = [\n    { value: '1h', label: '1시간' },\n    { value: '6h', label: '6시간' },\n    { value: '24h', label: '24시간' },\n    { value: '7d', label: '7일' }\n  ];\n\n  const refreshIntervals = [\n    { value: 10, label: '10초' },\n    { value: 30, label: '30초' },\n    { value: 60, label: '1분' },\n    { value: 300, label: '5분' }\n  ];\n\n  // 시간 범위 → hours 변환\n  const getHours = (range) => {\n    switch (range) {\n      case '1h': return 1;\n      case '6h': return 6;\n      case '24h': return 24;\n      case '7d': return 24 * 7;\n      default: return 1;\n    }\n  };\n\n  // CloudWatch 메트릭 데이터 가져오기\n  const fetchCloudwatchMetrics = useCallback(async () => {\n    if (!selectedDb) return;\n    setLoading(true);\n    try {\n      const dbIdentifier = selectedDb;\n      const hours = getHours(timeRange);\n      const results = await Promise.all(\n        CLOUDWATCH_METRICS.map(async (metric) => {\n          const url = `/api/monitoring/cloudwatch/metrics/${dbIdentifier}?metric_name=${metric.name}&hours=${hours}`;\n          const res = await fetch(url);\n          let json = { data: [] };\n          try {\n            json = await res.json();\n          } catch (e) {}\n          // 콘솔에 응답(raw) 출력\n          console.log(`[CloudWatch][${metric.name}]`, json);\n          if (!res.ok) return { key: metric.key, data: [] };\n          return { key: metric.key, data: json.data || [] };\n        })\n      );\n      const newMetrics = {};\n      results.forEach(({ key, data }) => {\n        newMetrics[key] = data;\n      });\n      setMetrics(newMetrics);\n    } catch (error) {\n      console.error('CloudWatch 메트릭 요청 오류:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [selectedDb, timeRange]);\n\n  // 자동 새로고침\n  useEffect(() => {\n    if (isAutoRefresh && selectedDb) {\n      fetchCloudwatchMetrics();\n      intervalRef.current = setInterval(() => {\n        fetchCloudwatchMetrics();\n      }, refreshInterval * 1000);\n      return () => {\n        if (intervalRef.current) clearInterval(intervalRef.current);\n      };\n    } else {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    }\n  }, [selectedDb, timeRange, refreshInterval, isAutoRefresh, fetchCloudwatchMetrics]);\n\n  // 수동 새로고침\n  const handleManualRefresh = () => {\n    fetchCloudwatchMetrics();\n  };\n\n  // 차트 데이터 포맷팅\n  const formatChartData = (data, metricKey) => {\n    if (!data || !Array.isArray(data)) return [];\n    // 메모리/스토리지는 단위 변환\n    if (metricKey === 'memory') {\n      return data.map(point => ({ x: new Date(point.timestamp), y: Math.round(point.value / 1024 / 1024) })); // MB\n    }\n    if (metricKey === 'storage') {\n      return data.map(point => ({ x: new Date(point.timestamp), y: Math.round(point.value / 1024 / 1024 / 1024) })); // GB\n    }\n    return data.map(point => ({ x: new Date(point.timestamp), y: point.value }));\n  };\n\n  // 카드/차트 UI 개선\n  const renderMetricCard = (title, value, unit = '', color = '#007bff') => (\n    <div className=\"metric-card improved\">\n      <div className=\"metric-header\">\n        <h4 style={{ color }}>{title}</h4>\n      </div>\n      <div className=\"metric-value\">\n        {value === null || value === undefined || isNaN(value) ? (\n          <span className=\"no-data\">데이터 없음</span>\n        ) : (\n          <span className=\"value\" style={{ color }}>{value}</span>\n        )}\n        {unit && <span className=\"unit\">{unit}</span>}\n      </div>\n    </div>\n  );\n\n  const renderChart = (title, data, color = '#007bff', unit = '') => (\n    <div className=\"chart-card improved\">\n      <h4 style={{ color }}>{title}</h4>\n      <div className=\"chart-container\">\n        {(!data || data.length === 0) ? (\n          <div className=\"no-data\">데이터 없음</div>\n        ) : (\n          <svg width=\"100%\" height=\"200\" viewBox=\"0 0 400 200\">\n            {data.length > 1 && (\n              <polyline\n                fill=\"none\"\n                stroke={color}\n                strokeWidth=\"2\"\n                points={data.map((point, i) =>\n                  `${(i / (data.length - 1)) * 400},${200 - (point.y / Math.max(...data.map(p => p.y) || [1])) * 180}`\n                ).join(' ')}\n              />\n            )}\n            {data.map((point, i) => (\n              <circle\n                key={i}\n                cx={(i / (data.length - 1)) * 400}\n                cy={200 - (point.y / Math.max(...data.map(p => p.y) || [1])) * 180}\n                r=\"3\"\n                fill={color}\n              />\n            ))}\n          </svg>\n        )}\n        {unit && <div className=\"chart-unit\">({unit})</div>}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"monitoring-component improved\">\n      {/* 헤더 */}\n      <div className=\"monitoring-header\">\n        <div className=\"header-left\">\n          <h2>데이터베이스 모니터링 (CloudWatch)</h2>\n          {selectedDb && (\n            <span className=\"selected-db\">선택된 DB: {selectedDb}</span>\n          )}\n        </div>\n        <div className=\"header-controls\">\n          {/* DB 선택 */}\n          <select \n            value={selectedDb || ''} \n            onChange={(e) => onDbChange(e.target.value)}\n            className=\"db-select\"\n          >\n            <option value=\"\">DB 선택</option>\n            {databases?.map(db => (\n              <option key={db.name} value={db.name}>\n                {db.name}\n              </option>\n            ))}\n          </select>\n          {/* 시간 범위 */}\n          <select \n            value={timeRange} \n            onChange={(e) => setTimeRange(e.target.value)}\n            className=\"time-range-select\"\n          >\n            {timeRanges.map(range => (\n              <option key={range.value} value={range.value}>\n                {range.label}\n              </option>\n            ))}\n          </select>\n          {/* 새로고침 간격 */}\n          <select \n            value={refreshInterval} \n            onChange={(e) => setRefreshInterval(Number(e.target.value))}\n            className=\"refresh-interval-select\"\n          >\n            {refreshIntervals.map(interval => (\n              <option key={interval.value} value={interval.value}>\n                {interval.label}\n              </option>\n            ))}\n          </select>\n          {/* 자동 새로고침 토글 */}\n          <label className=\"auto-refresh-toggle\">\n            <input\n              type=\"checkbox\"\n              checked={isAutoRefresh}\n              onChange={(e) => setIsAutoRefresh(e.target.checked)}\n            />\n            자동 새로고침\n          </label>\n          {/* 수동 새로고침 */}\n          <button \n            onClick={handleManualRefresh}\n            disabled={loading || !selectedDb}\n            className=\"btn btn-outline\"\n          >\n            {loading ? '새로고침 중...' : '🔄 새로고침'}\n          </button>\n        </div>\n      </div>\n      {!selectedDb ? (\n        <div className=\"no-db-selected\">\n          <p>모니터링할 데이터베이스를 선택해주세요.</p>\n        </div>\n      ) : (\n        <div className=\"monitoring-content\">\n          {/* 2단 카드 그리드 */}\n          <div className=\"metrics-grid improved\">\n            {CLOUDWATCH_METRICS.map(metric => {\n              const data = metrics[metric.key] || [];\n              const latest = data.length > 0 ? data[data.length - 1].value : null;\n              let displayValue = latest;\n              if (metric.key === 'memory' && latest !== null) displayValue = Math.round(latest); // MB\n              if (metric.key === 'storage' && latest !== null) displayValue = Math.round(latest); // GB\n              return renderMetricCard(metric.label, displayValue, metric.unit, metric.color);\n            })}\n          </div>\n          {/* 2단 차트 그리드 */}\n          <div className=\"charts-grid improved\">\n            {CLOUDWATCH_METRICS.map(metric => {\n              const data = formatChartData(metrics[metric.key], metric.key);\n              return renderChart(metric.label, data, metric.color, metric.unit);\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MonitoringComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}