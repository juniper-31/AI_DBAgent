{"ast":null,"code":"import _objectSpread from\"/Users/bskong/Repository/test/db-agent/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// ChatComponent.js\n// 자연어→SQL, AI 통합 채팅 컴포넌트\nimport React,{useState,useEffect,useRef}from'react';import axios from'axios';import ReactMarkdown from'react-markdown';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ChatComponent(_ref){var _dbSchema$tables;let{selectedDb,databases,onDbChange}=_ref;const[messages,setMessages]=useState([]);const[input,setInput]=useState('');const[loading,setLoading]=useState(false);const[textareaRows,setTextareaRows]=useState(1);const messagesEndRef=useRef(null);const textareaRef=useRef(null);const[aiModels,setAiModels]=useState([]);const[selectedAiModel,setSelectedAiModel]=useState('');const[dbSchema,setDbSchema]=useState(null);// DB 스키마 정보\nconst[conversations,setConversations]=useState([]);// 대화 목록\nconst[currentConversationId,setCurrentConversationId]=useState(null);// 현재 대화 ID\n// 추천 질문들 (카드형)\nconst suggestedQuestions=[{title:'성능 분석',questions:['오늘 가장 오래 걸린 쿼리 보여줘','슬로우 쿼리 10개만 보여줘','테이블별 row 수와 크기 알려줘']},{title:'데이터 탐색',questions:['가장 row가 많은 테이블 알려줘','최근 7일간 생성된 데이터 보여줘','사용자 테이블의 구조를 설명해줘']},{title:'시스템 상태',questions:['현재 활성 연결 수는?','데이터베이스 크기와 사용량 알려줘','인덱스 사용 현황을 분석해줘']}];// 자동 스크롤\nconst scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};useEffect(()=>{scrollToBottom();},[messages]);// DB 선택 변경 시 대화 목록 불러오기\nuseEffect(()=>{const fetchConversations=async()=>{if(selectedDb){try{const response=await axios.get(\"/api/conversations?db_name=\".concat(selectedDb));if(response.data.status==='success'){const conversations=response.data.conversations;setConversations(conversations);if(conversations.length>0){// 가장 최근 대화를 자동으로 선택\nsetCurrentConversationId(conversations[0].id);}else{// 대화가 없으면 현재 대화 초기화\nsetCurrentConversationId(null);setMessages([]);}}}catch(error){console.error('대화 목록을 불러오는데 실패했습니다:',error);setConversations([]);}}else{setConversations([]);setCurrentConversationId(null);setMessages([]);}};fetchConversations();},[selectedDb]);// DB 선택 변경 시 스키마 정보 불러오기\nuseEffect(()=>{const fetchDbSchema=async()=>{if(selectedDb&&selectedDb!=='__ALL_DBS__'){try{const response=await axios.get(\"/api/schema/\".concat(selectedDb));if(response.data.status==='success'){setDbSchema(response.data.schema);console.log('DB 스키마 정보 로드 완료:',response.data.schema);}}catch(error){console.error('DB 스키마 정보를 불러오는데 실패했습니다:',error);setDbSchema(null);}}else{setDbSchema(null);}};fetchDbSchema();},[selectedDb]);// 현재 대화 ID 변경 시 메시지 불러오기\nuseEffect(()=>{const fetchMessages=async()=>{if(currentConversationId){try{const response=await axios.get(\"/api/conversations/\".concat(currentConversationId,\"/messages\"));if(response.data.status==='success'){// DB에서 불러온 메시지 형식 변환\nconst formattedMessages=response.data.messages.map(msg=>({role:msg.role,content:msg.content,sql:msg.sql_query,result:msg.sql_result?JSON.parse(msg.sql_result):null,timestamp:new Date(msg.timestamp).toLocaleTimeString()}));setMessages(formattedMessages);}}catch(error){console.error('메시지를 불러오는데 실패했습니다:',error);setMessages([]);}}else{setMessages([]);}};fetchMessages();},[currentConversationId]);// AI 모델 목록 불러오기 (한 번만 실행)\nuseEffect(()=>{const fetchAiModels=async()=>{try{const openaiRes=await axios.get('/api/openai/keys');const azureOpenAIRes=await axios.get('/api/azure-openai/configs');const geminiRes=await axios.get('/api/gemini/configs');const claudeRes=await axios.get('/api/claude/configs');const allModels=[...openaiRes.data.keys.map(k=>_objectSpread(_objectSpread({},k),{},{type:'openai'})),...azureOpenAIRes.data.configs.map(c=>_objectSpread(_objectSpread({},c),{},{type:'azure_openai'})),...geminiRes.data.configs.map(c=>_objectSpread(_objectSpread({},c),{},{type:'gemini'})),...claudeRes.data.configs.map(c=>_objectSpread(_objectSpread({},c),{},{type:'claude'}))];setAiModels(allModels);const currentSelected=allModels.find(m=>m.is_selected);if(currentSelected){setSelectedAiModel(currentSelected.name);}else if(allModels.length>0){const defaultModel=allModels[0];let selectApiEndpoint='';if(defaultModel.type==='openai')selectApiEndpoint='/api/openai/select';else if(defaultModel.type==='azure_openai')selectApiEndpoint='/api/azure-openai/select';else if(defaultModel.type==='gemini')selectApiEndpoint='/api/gemini/select';else if(defaultModel.type==='claude')selectApiEndpoint='/api/claude/select';if(selectApiEndpoint){const formData=new FormData();formData.append('name',defaultModel.name);axios.post(selectApiEndpoint,formData).then(()=>{setSelectedAiModel(defaultModel.name);console.log(\"Default AI model selected: \".concat(defaultModel.name));}).catch(error=>{console.error('Error selecting default AI model:',error);});}}}catch(error){console.error('Error fetching AI models:',error);}};fetchAiModels();},[]);// 텍스트 영역 자동 크기 조정\nconst autoResizeTextarea=el=>{el.style.height='auto';const newHeight=Math.min(el.scrollHeight,120);// 최대 5줄\nel.style.height=newHeight+'px';setTextareaRows(Math.ceil(newHeight/24));};// 추천 질문 클릭\nconst handleSuggestedQuestion=question=>{var _textareaRef$current;setInput(question);(_textareaRef$current=textareaRef.current)===null||_textareaRef$current===void 0?void 0:_textareaRef$current.focus();};// DB 스키마 정보를 AI 프롬프트로 변환\nconst generateSchemaPrompt=schema=>{let prompt='';// 테이블 정보\nprompt+=\"\\uB370\\uC774\\uD130\\uBCA0\\uC774\\uC2A4\\uC5D0 \".concat(schema.tables.length,\"\\uAC1C\\uC758 \\uD14C\\uC774\\uBE14\\uC774 \\uC788\\uC2B5\\uB2C8\\uB2E4:\\n\\n\");schema.tables.forEach(table=>{prompt+=\"\\uD14C\\uC774\\uBE14: \".concat(table.name);if(table.comment){prompt+=\" (\".concat(table.comment,\")\");}prompt+='\\n';// 컬럼 정보\nprompt+='  컬럼:\\n';table.columns.forEach(column=>{prompt+=\"    - \".concat(column.name,\": \").concat(column.type);if(column.max_length){prompt+=\"(\".concat(column.max_length,\")\");}if(column.precision&&column.scale){prompt+=\"(\".concat(column.precision,\",\").concat(column.scale,\")\");}if(!column.nullable){prompt+=' (NOT NULL)';}if(column.default){prompt+=\" (\\uAE30\\uBCF8\\uAC12: \".concat(column.default,\")\");}if(column.comment){prompt+=\" - \".concat(column.comment);}prompt+='\\n';});// 인덱스 정보\nif(table.indexes&&table.indexes.length>0){prompt+='  인덱스:\\n';table.indexes.forEach(index=>{prompt+=\"    - \".concat(index.name,\": [\").concat(index.columns.join(', '),\"]\");if(index.unique){prompt+=' (UNIQUE)';}if(index.primary){prompt+=' (PRIMARY KEY)';}prompt+='\\n';});}prompt+='\\n';});// 관계 정보\nif(schema.relationships&&schema.relationships.length>0){prompt+='테이블 관계:\\n';schema.relationships.forEach(rel=>{prompt+=\"  \".concat(rel.table,\".\").concat(rel.column,\" -> \").concat(rel.foreign_table,\".\").concat(rel.foreign_column,\"\\n\");});prompt+='\\n';}return prompt;};// 기존 대화 선택\nconst handleSelectConversation=convId=>{setCurrentConversationId(convId);};// 대화 삭제\nconst handleDeleteConversation=async convId=>{if(window.confirm('정말로 이 대화를 삭제하시겠습니까? 모든 메시지가 영구적으로 삭제됩니다.')){try{await axios.delete(\"/api/conversations/\".concat(convId));// 대화 목록 새로고침\nconst convRes=await axios.get(\"/api/conversations?db_name=\".concat(selectedDb));if(convRes.data.status==='success'){setConversations(convRes.data.conversations);}if(currentConversationId===convId){setCurrentConversationId(null);setMessages([]);}}catch(error){console.error('대화 삭제 실패:',error);alert('대화 삭제에 실패했습니다.');}}};// 메시지 전송\nconst handleSend=async()=>{if(!input.trim()||!selectedDb)return;if(!selectedAiModel){alert('먼저 사용할 AI 모델을 선택해주세요.');return;}let conversationId=currentConversationId;// 현재 대화가 없으면 새로 생성\nif(!conversationId){try{const newConvResponse=await axios.post('/api/conversations/new',new URLSearchParams({db_name:selectedDb,title:input.substring(0,30)// 첫 메시지를 제목으로 사용\n}));if(newConvResponse.data.status==='success'){conversationId=newConvResponse.data.conversation_id;setCurrentConversationId(conversationId);// 대화 목록 새로고침\nconst convRes=await axios.get(\"/api/conversations?db_name=\".concat(selectedDb));if(convRes.data.status==='success'){setConversations(convRes.data.conversations);}}else{throw new Error('Failed to create new conversation');}}catch(error){console.error('새 대화 생성 실패:',error);alert('새 대화를 생성하는데 실패했습니다.');return;}}const userMessage={role:'user',content:input,timestamp:new Date().toLocaleTimeString()};setMessages(prev=>[...prev,userMessage]);setLoading(true);setInput('');setTextareaRows(1);if(textareaRef.current){textareaRef.current.style.height='auto';}try{const formData=new FormData();formData.append('db_name',selectedDb);// DB 스키마 정보를 포함한 향상된 프롬프트 생성\nlet enhancedPrompt=input;if(dbSchema&&dbSchema.tables&&dbSchema.tables.length>0){const schemaInfo=generateSchemaPrompt(dbSchema);enhancedPrompt=\"[\\uB370\\uC774\\uD130\\uBCA0\\uC774\\uC2A4 \\uC2A4\\uD0A4\\uB9C8 \\uC815\\uBCF4]\\n\".concat(schemaInfo,\"\\n\\n[\\uC0AC\\uC6A9\\uC790 \\uC9C8\\uBB38]\\n\").concat(input);}formData.append('prompt',enhancedPrompt);formData.append('conversation_id',conversationId);// 대화 ID 전송\nconst response=await axios.post('/api/nl2sql',formData);if(response.data.status==='success'){const data=response.data.message;const assistantMessage={role:'assistant',content:data.content||'',sql:data.sql||'',result:data.result||null,timestamp:new Date().toLocaleTimeString()};setMessages(prev=>[...prev,assistantMessage]);}else{const errorMessage={role:'assistant',content:response.data.error||'알 수 없는 오류 발생',error:true,timestamp:new Date().toLocaleTimeString()};setMessages(prev=>[...prev,errorMessage]);}}catch(error){console.error('요청 처리 중 오류 발생:',error);const errorMessage={role:'assistant',content:'죄송합니다. 요청 처리 중 오류가 발생했습니다.',error:true,timestamp:new Date().toLocaleTimeString()};setMessages(prev=>[...prev,errorMessage]);}finally{setLoading(false);}};// 키보드 이벤트 처리\nconst handleKeyDown=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleSend();}};// 텍스트 영역 입력 처리\nconst handleInputChange=e=>{setInput(e.target.value);autoResizeTextarea(e.target);};// 채팅 초기화 (현재 대화의 메시지만 삭제)\nconst handleResetChat=async()=>{if(!currentConversationId)return;if(window.confirm('현재 대화의 모든 메시지를 초기화하시겠습니까?')){try{const formData=new FormData();formData.append('conversation_id',currentConversationId);const response=await axios.post('/api/nl2sql/reset',formData);if(response.data.status==='success'){setMessages([]);// 대화 목록 새로고침 (업데이트된 updated_at 반영)\nconst convRes=await axios.get(\"/api/conversations?db_name=\".concat(selectedDb));if(convRes.data.status==='success'){setConversations(convRes.data.conversations);}}}catch(error){console.error('채팅 초기화 오류:',error);alert('채팅 초기화에 실패했습니다.');}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-page-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"conversation-sidebar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDCAC \\uB300\\uD654 \\uBAA9\\uB85D\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary btn-sm\",onClick:()=>{setCurrentConversationId(null);setMessages([]);},title:\"\\uC0C8 \\uB300\\uD654 \\uC2DC\\uC791\",children:\"\\u2795 \\uC0C8 \\uB300\\uD654\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"conversation-list-container\",children:conversations.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"no-conversations\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\uC544\\uC9C1 \\uB300\\uD654\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"\\uC0C8 \\uB300\\uD654\\uB97C \\uC2DC\\uC791\\uD574\\uBCF4\\uC138\\uC694!\"})]}):/*#__PURE__*/_jsx(\"ul\",{className:\"conversation-list list-group\",children:conversations.map(conv=>/*#__PURE__*/_jsxs(\"li\",{className:\"conversation-item \".concat(currentConversationId===conv.id?'active':''),onClick:()=>handleSelectConversation(conv.id),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"conversation-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"conversation-title\",children:conv.title||'제목 없음'}),/*#__PURE__*/_jsx(\"div\",{className:\"conversation-meta\",children:/*#__PURE__*/_jsx(\"small\",{children:new Date(conv.updated_at).toLocaleString()})})]}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-sm btn-outline-danger delete-btn\",onClick:e=>{e.stopPropagation();handleDeleteConversation(conv.id);},title:\"\\uB300\\uD654 \\uC0AD\\uC81C\",children:\"\\uD83D\\uDDD1\\uFE0F\"})]},conv.id))})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-left\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"db-selector\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"db-select\",className:\"prompt-label\",children:\"DB \\uC120\\uD0DD\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"db-select\",value:selectedDb||'',onChange:e=>onDbChange(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"DB\\uB97C \\uC120\\uD0DD\\uD558\\uC138\\uC694\"}),/*#__PURE__*/_jsx(\"option\",{value:\"__ALL_DBS__\",children:\"\\uBAA8\\uB4E0 DB\"}),databases===null||databases===void 0?void 0:databases.map(db=>/*#__PURE__*/_jsx(\"option\",{value:db.name,children:db.name},db.name))]})]}),selectedDb&&selectedDb!=='__ALL_DBS__'&&/*#__PURE__*/_jsxs(\"div\",{className:\"schema-status ms-3\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"prompt-label\",children:\"\\uC2A4\\uD0A4\\uB9C8 \\uC815\\uBCF4\"}),/*#__PURE__*/_jsx(\"div\",{className:\"schema-indicator\",children:dbSchema?/*#__PURE__*/_jsxs(\"span\",{className:\"schema-loaded\",children:[\"\\u2705 \",((_dbSchema$tables=dbSchema.tables)===null||_dbSchema$tables===void 0?void 0:_dbSchema$tables.length)||0,\"\\uAC1C \\uD14C\\uC774\\uBE14 \\uB85C\\uB4DC\\uB428\"]}):/*#__PURE__*/_jsx(\"span\",{className:\"schema-loading\",children:\"\\u23F3 \\uC2A4\\uD0A4\\uB9C8 \\uB85C\\uB529 \\uC911...\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"ai-model-selector ms-3\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"ai-model-select\",className:\"prompt-label\",children:\"AI \\uBAA8\\uB378 \\uC120\\uD0DD\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"ai-model-select\",value:selectedAiModel,onChange:async e=>{const modelName=e.target.value;const selected=aiModels.find(m=>m.name===modelName);if(selected){let selectApiEndpoint='';if(selected.type==='openai')selectApiEndpoint='/api/openai/select';else if(selected.type==='azure_openai')selectApiEndpoint='/api/azure-openai/select';else if(selected.type==='gemini')selectApiEndpoint='/api/gemini/select';else if(selected.type==='claude')selectApiEndpoint='/api/claude/select';if(selectApiEndpoint){try{const formData=new FormData();formData.append('name',selected.name);await axios.post(selectApiEndpoint,formData);setSelectedAiModel(selected.name);alert(\"\".concat(selected.name,\" AI \\uBAA8\\uB378\\uC774 \\uC120\\uD0DD\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"));}catch(error){console.error('Error selecting AI model:',error);alert('AI 모델 선택에 실패했습니다.');}}}},children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"AI \\uBAA8\\uB378 \\uC120\\uD0DD\"}),aiModels.map(model=>/*#__PURE__*/_jsxs(\"option\",{value:model.name,children:[model.name,\" (\",model.type,\")\"]},model.name))]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"header-actions\",children:[currentConversationId&&/*#__PURE__*/_jsx(\"button\",{onClick:handleResetChat,className:\"btn btn-outline-warning btn-sm\",title:\"\\uD604\\uC7AC \\uB300\\uD654 \\uCD08\\uAE30\\uD654\",children:\"\\uD83D\\uDD04 \\uCD08\\uAE30\\uD654\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{setCurrentConversationId(null);setMessages([]);},className:\"btn btn-outline-primary btn-sm ms-2\",title:\"\\uC0C8 \\uB300\\uD654 \\uC2DC\\uC791\",children:\"\\u2795 \\uC0C8 \\uB300\\uD654\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-messages\",id:\"chat-messages\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-box\",children:[messages.length===0&&!currentConversationId&&/*#__PURE__*/_jsxs(\"div\",{className:\"suggest-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDCA1 \\uCD94\\uCC9C \\uC9C8\\uBB38\"}),/*#__PURE__*/_jsx(\"div\",{className:\"suggest-cards\",children:suggestedQuestions.map((category,categoryIndex)=>/*#__PURE__*/_jsxs(\"div\",{className:\"suggest-category\",children:[/*#__PURE__*/_jsx(\"h4\",{children:category.title}),/*#__PURE__*/_jsx(\"div\",{className:\"suggest-cards-grid\",children:category.questions.map((question,questionIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"suggest-card\",onClick:()=>handleSuggestedQuestion(question),children:question},questionIndex))})]},categoryIndex))})]}),messages.map((msg,idx)=>/*#__PURE__*/_jsx(\"div\",{className:\"message \".concat(msg.role==='user'?'message-user':'message-ai'),children:/*#__PURE__*/_jsxs(\"div\",{className:\"message-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"message-header\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"message-role\",children:msg.role==='user'?'👤 사용자':'🤖 AI'}),/*#__PURE__*/_jsx(\"span\",{className:\"message-time\",children:msg.timestamp})]}),/*#__PURE__*/_jsx(\"div\",{className:\"message-body\",children:msg.role==='user'?/*#__PURE__*/_jsx(\"div\",{className:\"user-message\",children:msg.content}):/*#__PURE__*/_jsxs(\"div\",{className:\"ai-message-card\",children:[msg.content&&/*#__PURE__*/_jsx(\"div\",{className:\"ai-response-section\",children:/*#__PURE__*/_jsx(ReactMarkdown,{children:msg.content})}),msg.sql&&/*#__PURE__*/_jsxs(\"div\",{className:\"sql-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"section-header\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\uD83D\\uDD0D \\uC0DD\\uC131\\uB41C SQL\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>navigator.clipboard.writeText(msg.sql),className:\"btn-copy\",children:\"\\uBCF5\\uC0AC\"})]}),/*#__PURE__*/_jsx(\"pre\",{children:/*#__PURE__*/_jsx(\"code\",{children:msg.sql})})]}),msg.result&&/*#__PURE__*/_jsxs(\"div\",{className:\"result-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"section-header\",children:/*#__PURE__*/_jsx(\"strong\",{children:\"\\uD83D\\uDCCA \\uCFFC\\uB9AC \\uACB0\\uACFC\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"result-table-container\",children:Array.isArray(msg.result)&&msg.result.length>0?/*#__PURE__*/_jsxs(\"table\",{className:\"result-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsx(\"tr\",{children:Object.keys(msg.result[0]||{}).map((key,i)=>/*#__PURE__*/_jsx(\"th\",{children:key},i))})}),/*#__PURE__*/_jsx(\"tbody\",{children:msg.result.map((row,i)=>/*#__PURE__*/_jsx(\"tr\",{children:Object.values(row).map((value,j)=>/*#__PURE__*/_jsx(\"td\",{children:String(value)},j))},i))})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"no-result\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\uACB0\\uACFC\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"}),/*#__PURE__*/_jsx(\"pre\",{children:/*#__PURE__*/_jsx(\"code\",{children:JSON.stringify(msg.result,null,2)})})]})})]}),msg.error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-section\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"alert alert-danger\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\u274C \\uC624\\uB958 \\uBC1C\\uC0DD\"}),/*#__PURE__*/_jsx(\"p\",{children:msg.content})]})})]})})]})},idx)),loading&&/*#__PURE__*/_jsx(\"div\",{className:\"message message-ai\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"message-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"message-header\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"message-role\",children:\"\\uD83E\\uDD16 AI\"}),/*#__PURE__*/_jsx(\"span\",{className:\"message-time\",children:\"\\uCC98\\uB9AC \\uC911...\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"message-body\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-indicator\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsx(\"span\",{children:\"AI\\uAC00 \\uC751\\uB2F5\\uC744 \\uC0DD\\uC131\\uD558\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4...\"})]})})]})}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-input-area\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"textarea\",{ref:textareaRef,value:input,onChange:handleInputChange,onKeyDown:handleKeyDown,placeholder:\"\\uC9C8\\uBB38\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694... (Shift+Enter\\uB85C \\uC904\\uBC14\\uAFC8)\",className:\"chat-input\",rows:textareaRows,disabled:loading||!selectedDb}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSend,disabled:loading||!input.trim()||!selectedDb,className:\"send-button\",children:loading?'⏳':'📤'})]})})]})]});}export default ChatComponent;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ReactMarkdown","jsx","_jsx","jsxs","_jsxs","ChatComponent","_ref","_dbSchema$tables","selectedDb","databases","onDbChange","messages","setMessages","input","setInput","loading","setLoading","textareaRows","setTextareaRows","messagesEndRef","textareaRef","aiModels","setAiModels","selectedAiModel","setSelectedAiModel","dbSchema","setDbSchema","conversations","setConversations","currentConversationId","setCurrentConversationId","suggestedQuestions","title","questions","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","fetchConversations","response","get","concat","data","status","length","id","error","console","fetchDbSchema","schema","log","fetchMessages","formattedMessages","map","msg","role","content","sql","sql_query","result","sql_result","JSON","parse","timestamp","Date","toLocaleTimeString","fetchAiModels","openaiRes","azureOpenAIRes","geminiRes","claudeRes","allModels","keys","k","_objectSpread","type","configs","c","currentSelected","find","m","is_selected","name","defaultModel","selectApiEndpoint","formData","FormData","append","post","then","catch","autoResizeTextarea","el","style","height","newHeight","Math","min","scrollHeight","ceil","handleSuggestedQuestion","question","_textareaRef$current","focus","generateSchemaPrompt","prompt","tables","forEach","table","comment","columns","column","max_length","precision","scale","nullable","default","indexes","index","join","unique","primary","relationships","rel","foreign_table","foreign_column","handleSelectConversation","convId","handleDeleteConversation","window","confirm","delete","convRes","alert","handleSend","trim","conversationId","newConvResponse","URLSearchParams","db_name","substring","conversation_id","Error","userMessage","prev","enhancedPrompt","schemaInfo","message","assistantMessage","errorMessage","handleKeyDown","e","key","shiftKey","preventDefault","handleInputChange","target","value","handleResetChat","className","children","onClick","conv","updated_at","toLocaleString","stopPropagation","htmlFor","onChange","db","modelName","selected","model","category","categoryIndex","questionIndex","idx","navigator","clipboard","writeText","Array","isArray","Object","i","row","values","j","String","stringify","ref","onKeyDown","placeholder","rows","disabled"],"sources":["/Users/bskong/Repository/test/db-agent/frontend/src/components/ChatComponent.js"],"sourcesContent":["// ChatComponent.js\n// 자연어→SQL, AI 통합 채팅 컴포넌트\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nimport ReactMarkdown from 'react-markdown';\n\nfunction ChatComponent({ selectedDb, databases, onDbChange }) {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [textareaRows, setTextareaRows] = useState(1);\n  const messagesEndRef = useRef(null);\n  const textareaRef = useRef(null);\n\n  const [aiModels, setAiModels] = useState([]);\n  const [selectedAiModel, setSelectedAiModel] = useState('');\n  const [dbSchema, setDbSchema] = useState(null); // DB 스키마 정보\n\n  const [conversations, setConversations] = useState([]); // 대화 목록\n  const [currentConversationId, setCurrentConversationId] = useState(null); // 현재 대화 ID\n\n  // 추천 질문들 (카드형)\n  const suggestedQuestions = [\n    {\n      title: '성능 분석',\n      questions: [\n        '오늘 가장 오래 걸린 쿼리 보여줘',\n        '슬로우 쿼리 10개만 보여줘',\n        '테이블별 row 수와 크기 알려줘'\n      ]\n    },\n    {\n      title: '데이터 탐색',\n      questions: [\n        '가장 row가 많은 테이블 알려줘',\n        '최근 7일간 생성된 데이터 보여줘',\n        '사용자 테이블의 구조를 설명해줘'\n      ]\n    },\n    {\n      title: '시스템 상태',\n      questions: [\n        '현재 활성 연결 수는?',\n        '데이터베이스 크기와 사용량 알려줘',\n        '인덱스 사용 현황을 분석해줘'\n      ]\n    }\n  ];\n\n  // 자동 스크롤\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // DB 선택 변경 시 대화 목록 불러오기\n  useEffect(() => {\n    const fetchConversations = async () => {\n      if (selectedDb) {\n        try {\n          const response = await axios.get(`/api/conversations?db_name=${selectedDb}`);\n          if (response.data.status === 'success') {\n            const conversations = response.data.conversations;\n            setConversations(conversations);\n            if (conversations.length > 0) {\n              // 가장 최근 대화를 자동으로 선택\n              setCurrentConversationId(conversations[0].id);\n            } else {\n              // 대화가 없으면 현재 대화 초기화\n              setCurrentConversationId(null);\n              setMessages([]);\n            }\n          }\n        } catch (error) {\n          console.error('대화 목록을 불러오는데 실패했습니다:', error);\n          setConversations([]);\n        }\n      } else {\n        setConversations([]);\n        setCurrentConversationId(null);\n        setMessages([]);\n      }\n    };\n\n    fetchConversations();\n  }, [selectedDb]);\n\n  // DB 선택 변경 시 스키마 정보 불러오기\n  useEffect(() => {\n    const fetchDbSchema = async () => {\n      if (selectedDb && selectedDb !== '__ALL_DBS__') {\n        try {\n          const response = await axios.get(`/api/schema/${selectedDb}`);\n          if (response.data.status === 'success') {\n            setDbSchema(response.data.schema);\n            console.log('DB 스키마 정보 로드 완료:', response.data.schema);\n          }\n        } catch (error) {\n          console.error('DB 스키마 정보를 불러오는데 실패했습니다:', error);\n          setDbSchema(null);\n        }\n      } else {\n        setDbSchema(null);\n      }\n    };\n\n    fetchDbSchema();\n  }, [selectedDb]);\n\n  // 현재 대화 ID 변경 시 메시지 불러오기\n  useEffect(() => {\n    const fetchMessages = async () => {\n      if (currentConversationId) {\n        try {\n          const response = await axios.get(`/api/conversations/${currentConversationId}/messages`);\n          if (response.data.status === 'success') {\n            // DB에서 불러온 메시지 형식 변환\n            const formattedMessages = response.data.messages.map(msg => ({\n              role: msg.role,\n              content: msg.content,\n              sql: msg.sql_query,\n              result: msg.sql_result ? JSON.parse(msg.sql_result) : null,\n              timestamp: new Date(msg.timestamp).toLocaleTimeString()\n            }));\n            setMessages(formattedMessages);\n          }\n        } catch (error) {\n          console.error('메시지를 불러오는데 실패했습니다:', error);\n          setMessages([]);\n        }\n      } else {\n        setMessages([]);\n      }\n    };\n    fetchMessages();\n  }, [currentConversationId]);\n\n  // AI 모델 목록 불러오기 (한 번만 실행)\n  useEffect(() => {\n    const fetchAiModels = async () => {\n      try {\n        const openaiRes = await axios.get('/api/openai/keys');\n        const azureOpenAIRes = await axios.get('/api/azure-openai/configs');\n        const geminiRes = await axios.get('/api/gemini/configs');\n        const claudeRes = await axios.get('/api/claude/configs');\n\n        const allModels = [\n          ...openaiRes.data.keys.map(k => ({ ...k, type: 'openai' })),\n          ...azureOpenAIRes.data.configs.map(c => ({ ...c, type: 'azure_openai' })),\n          ...geminiRes.data.configs.map(c => ({ ...c, type: 'gemini' })),\n          ...claudeRes.data.configs.map(c => ({ ...c, type: 'claude' })),\n        ];\n        setAiModels(allModels);\n\n        const currentSelected = allModels.find(m => m.is_selected);\n        if (currentSelected) {\n          setSelectedAiModel(currentSelected.name);\n        } else if (allModels.length > 0) {\n          const defaultModel = allModels[0];\n          let selectApiEndpoint = '';\n          if (defaultModel.type === 'openai') selectApiEndpoint = '/api/openai/select';\n          else if (defaultModel.type === 'azure_openai') selectApiEndpoint = '/api/azure-openai/select';\n          else if (defaultModel.type === 'gemini') selectApiEndpoint = '/api/gemini/select';\n          else if (defaultModel.type === 'claude') selectApiEndpoint = '/api/claude/select';\n\n          if (selectApiEndpoint) {\n            const formData = new FormData();\n            formData.append('name', defaultModel.name);\n            axios.post(selectApiEndpoint, formData)\n              .then(() => {\n                setSelectedAiModel(defaultModel.name);\n                console.log(`Default AI model selected: ${defaultModel.name}`);\n              })\n              .catch(error => {\n                console.error('Error selecting default AI model:', error);\n              });\n          }\n        }\n\n      } catch (error) {\n        console.error('Error fetching AI models:', error);\n      }\n    };\n    fetchAiModels();\n  }, []);\n\n  // 텍스트 영역 자동 크기 조정\n  const autoResizeTextarea = (el) => {\n    el.style.height = 'auto';\n    const newHeight = Math.min(el.scrollHeight, 120); // 최대 5줄\n    el.style.height = newHeight + 'px';\n    setTextareaRows(Math.ceil(newHeight / 24));\n  };\n\n  // 추천 질문 클릭\n  const handleSuggestedQuestion = (question) => {\n    setInput(question);\n    textareaRef.current?.focus();\n  };\n\n  // DB 스키마 정보를 AI 프롬프트로 변환\n  const generateSchemaPrompt = (schema) => {\n    let prompt = '';\n    \n    // 테이블 정보\n    prompt += `데이터베이스에 ${schema.tables.length}개의 테이블이 있습니다:\\n\\n`;\n    \n    schema.tables.forEach(table => {\n      prompt += `테이블: ${table.name}`;\n      if (table.comment) {\n        prompt += ` (${table.comment})`;\n      }\n      prompt += '\\n';\n      \n      // 컬럼 정보\n      prompt += '  컬럼:\\n';\n      table.columns.forEach(column => {\n        prompt += `    - ${column.name}: ${column.type}`;\n        if (column.max_length) {\n          prompt += `(${column.max_length})`;\n        }\n        if (column.precision && column.scale) {\n          prompt += `(${column.precision},${column.scale})`;\n        }\n        if (!column.nullable) {\n          prompt += ' (NOT NULL)';\n        }\n        if (column.default) {\n          prompt += ` (기본값: ${column.default})`;\n        }\n        if (column.comment) {\n          prompt += ` - ${column.comment}`;\n        }\n        prompt += '\\n';\n      });\n      \n      // 인덱스 정보\n      if (table.indexes && table.indexes.length > 0) {\n        prompt += '  인덱스:\\n';\n        table.indexes.forEach(index => {\n          prompt += `    - ${index.name}: [${index.columns.join(', ')}]`;\n          if (index.unique) {\n            prompt += ' (UNIQUE)';\n          }\n          if (index.primary) {\n            prompt += ' (PRIMARY KEY)';\n          }\n          prompt += '\\n';\n        });\n      }\n      prompt += '\\n';\n    });\n    \n    // 관계 정보\n    if (schema.relationships && schema.relationships.length > 0) {\n      prompt += '테이블 관계:\\n';\n      schema.relationships.forEach(rel => {\n        prompt += `  ${rel.table}.${rel.column} -> ${rel.foreign_table}.${rel.foreign_column}\\n`;\n      });\n      prompt += '\\n';\n    }\n    \n    return prompt;\n  };\n\n  // 기존 대화 선택\n  const handleSelectConversation = (convId) => {\n    setCurrentConversationId(convId);\n  };\n\n  // 대화 삭제\n  const handleDeleteConversation = async (convId) => {\n    if (window.confirm('정말로 이 대화를 삭제하시겠습니까? 모든 메시지가 영구적으로 삭제됩니다.')) {\n      try {\n        await axios.delete(`/api/conversations/${convId}`);\n        // 대화 목록 새로고침\n        const convRes = await axios.get(`/api/conversations?db_name=${selectedDb}`);\n        if (convRes.data.status === 'success') {\n          setConversations(convRes.data.conversations);\n        }\n        if (currentConversationId === convId) {\n          setCurrentConversationId(null);\n          setMessages([]);\n        }\n      } catch (error) {\n        console.error('대화 삭제 실패:', error);\n        alert('대화 삭제에 실패했습니다.');\n      }\n    }\n  };\n\n  // 메시지 전송\n  const handleSend = async () => {\n    if (!input.trim() || !selectedDb) return;\n    \n    if (!selectedAiModel) {\n      alert('먼저 사용할 AI 모델을 선택해주세요.');\n      return;\n    }\n\n    let conversationId = currentConversationId;\n\n    // 현재 대화가 없으면 새로 생성\n    if (!conversationId) {\n      try {\n        const newConvResponse = await axios.post('/api/conversations/new', new URLSearchParams({\n          db_name: selectedDb,\n          title: input.substring(0, 30) // 첫 메시지를 제목으로 사용\n        }));\n        if (newConvResponse.data.status === 'success') {\n          conversationId = newConvResponse.data.conversation_id;\n          setCurrentConversationId(conversationId);\n          // 대화 목록 새로고침\n          const convRes = await axios.get(`/api/conversations?db_name=${selectedDb}`);\n          if (convRes.data.status === 'success') {\n            setConversations(convRes.data.conversations);\n          }\n        } else {\n          throw new Error('Failed to create new conversation');\n        }\n      } catch (error) {\n        console.error('새 대화 생성 실패:', error);\n        alert('새 대화를 생성하는데 실패했습니다.');\n        return;\n      }\n    }\n    \n    const userMessage = { \n      role: 'user', \n      content: input,\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setLoading(true);\n    setInput('');\n    setTextareaRows(1);\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n\n    try {\n      const formData = new FormData();\n      formData.append('db_name', selectedDb);\n      \n      // DB 스키마 정보를 포함한 향상된 프롬프트 생성\n      let enhancedPrompt = input;\n      if (dbSchema && dbSchema.tables && dbSchema.tables.length > 0) {\n        const schemaInfo = generateSchemaPrompt(dbSchema);\n        enhancedPrompt = `[데이터베이스 스키마 정보]\\n${schemaInfo}\\n\\n[사용자 질문]\\n${input}`;\n      }\n      \n      formData.append('prompt', enhancedPrompt);\n      formData.append('conversation_id', conversationId); // 대화 ID 전송\n\n      const response = await axios.post('/api/nl2sql', formData);\n\n      if (response.data.status === 'success') {\n        const data = response.data.message;\n        const assistantMessage = {\n          role: 'assistant',\n          content: data.content || '',\n          sql: data.sql || '',\n          result: data.result || null,\n          timestamp: new Date().toLocaleTimeString()\n        };\n        setMessages(prev => [...prev, assistantMessage]);\n      } else {\n        const errorMessage = {\n          role: 'assistant',\n          content: response.data.error || '알 수 없는 오류 발생',\n          error: true,\n          timestamp: new Date().toLocaleTimeString()\n        };\n        setMessages(prev => [...prev, errorMessage]);\n      }\n    } catch (error) {\n      console.error('요청 처리 중 오류 발생:', error);\n      const errorMessage = {\n        role: 'assistant',\n        content: '죄송합니다. 요청 처리 중 오류가 발생했습니다.',\n        error: true,\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 키보드 이벤트 처리\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  // 텍스트 영역 입력 처리\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    autoResizeTextarea(e.target);\n  };\n\n  // 채팅 초기화 (현재 대화의 메시지만 삭제)\n  const handleResetChat = async () => {\n    if (!currentConversationId) return;\n    \n    if (window.confirm('현재 대화의 모든 메시지를 초기화하시겠습니까?')) {\n      try {\n        const formData = new FormData();\n        formData.append('conversation_id', currentConversationId);\n        const response = await axios.post('/api/nl2sql/reset', formData);\n        \n        if (response.data.status === 'success') {\n          setMessages([]);\n          // 대화 목록 새로고침 (업데이트된 updated_at 반영)\n          const convRes = await axios.get(`/api/conversations?db_name=${selectedDb}`);\n          if (convRes.data.status === 'success') {\n            setConversations(convRes.data.conversations);\n          }\n        }\n      } catch (error) {\n        console.error('채팅 초기화 오류:', error);\n        alert('채팅 초기화에 실패했습니다.');\n      }\n    }\n  };\n\n  return (\n    <div className=\"chat-page-container\">\n      {/* 대화 목록 사이드바 */}\n      <div className=\"conversation-sidebar\">\n        <div className=\"sidebar-header\">\n          <h3>💬 대화 목록</h3>\n          <button \n            className=\"btn btn-primary btn-sm\"\n            onClick={() => {\n              setCurrentConversationId(null);\n              setMessages([]);\n            }}\n            title=\"새 대화 시작\"\n          >\n            ➕ 새 대화\n          </button>\n        </div>\n        \n        <div className=\"conversation-list-container\">\n          {conversations.length === 0 ? (\n            <div className=\"no-conversations\">\n              <p>아직 대화가 없습니다.</p>\n              <p>새 대화를 시작해보세요!</p>\n            </div>\n          ) : (\n            <ul className=\"conversation-list list-group\">\n              {conversations.map(conv => (\n                <li \n                  key={conv.id} \n                  className={`conversation-item ${currentConversationId === conv.id ? 'active' : ''}`}\n                  onClick={() => handleSelectConversation(conv.id)}\n                >\n                  <div className=\"conversation-content\">\n                    <div className=\"conversation-title\">\n                      {conv.title || '제목 없음'}\n                    </div>\n                    <div className=\"conversation-meta\">\n                      <small>{new Date(conv.updated_at).toLocaleString()}</small>\n                    </div>\n                  </div>\n                  <button \n                    className=\"btn btn-sm btn-outline-danger delete-btn\"\n                    onClick={(e) => { \n                      e.stopPropagation(); \n                      handleDeleteConversation(conv.id); \n                    }}\n                    title=\"대화 삭제\"\n                  >\n                    🗑️\n                  </button>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </div>\n\n      <div className=\"chat-container\">\n        {/* 채팅 헤더 */}\n        <div className=\"chat-header\">\n          <div className=\"header-left\">\n            <div className=\"db-selector\">\n              <label htmlFor=\"db-select\" className=\"prompt-label\">DB 선택</label>\n              <select \n                id=\"db-select\" \n                value={selectedDb || ''} \n                onChange={(e) => onDbChange(e.target.value)}\n              >\n                <option value=\"\">DB를 선택하세요</option>\n                <option value=\"__ALL_DBS__\">모든 DB</option>\n                {databases?.map(db => (\n                  <option key={db.name} value={db.name}>\n                    {db.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            {/* DB 스키마 정보 상태 표시 */}\n            {selectedDb && selectedDb !== '__ALL_DBS__' && (\n              <div className=\"schema-status ms-3\">\n                <label className=\"prompt-label\">스키마 정보</label>\n                <div className=\"schema-indicator\">\n                  {dbSchema ? (\n                    <span className=\"schema-loaded\">\n                      ✅ {dbSchema.tables?.length || 0}개 테이블 로드됨\n                    </span>\n                  ) : (\n                    <span className=\"schema-loading\">\n                      ⏳ 스키마 로딩 중...\n                    </span>\n                  )}\n                </div>\n              </div>\n            )}\n            \n            {/* AI 모델 선택 드롭다운 */}\n            <div className=\"ai-model-selector ms-3\">\n              <label htmlFor=\"ai-model-select\" className=\"prompt-label\">AI 모델 선택</label>\n              <select \n                id=\"ai-model-select\" \n                value={selectedAiModel} \n                onChange={async (e) => {\n                  const modelName = e.target.value;\n                  const selected = aiModels.find(m => m.name === modelName);\n                  if (selected) {\n                    let selectApiEndpoint = '';\n                    if (selected.type === 'openai') selectApiEndpoint = '/api/openai/select';\n                    else if (selected.type === 'azure_openai') selectApiEndpoint = '/api/azure-openai/select';\n                    else if (selected.type === 'gemini') selectApiEndpoint = '/api/gemini/select';\n                    else if (selected.type === 'claude') selectApiEndpoint = '/api/claude/select';\n\n                    if (selectApiEndpoint) {\n                      try {\n                        const formData = new FormData();\n                        formData.append('name', selected.name);\n                        await axios.post(selectApiEndpoint, formData);\n                        setSelectedAiModel(selected.name);\n                        alert(`${selected.name} AI 모델이 선택되었습니다.`);\n                      } catch (error) {\n                        console.error('Error selecting AI model:', error);\n                        alert('AI 모델 선택에 실패했습니다.');\n                      }\n                    }\n                  }\n                }}\n              >\n                <option value=\"\">AI 모델 선택</option>\n                {aiModels.map(model => (\n                  <option key={model.name} value={model.name}>\n                    {model.name} ({model.type})\n                  </option>\n                ))}\n              </select>\n            </div>\n\n          </div>\n          \n          <div className=\"header-actions\">\n            {currentConversationId && (\n              <button \n                onClick={handleResetChat} \n                className=\"btn btn-outline-warning btn-sm\"\n                title=\"현재 대화 초기화\"\n              >\n                🔄 초기화\n              </button>\n            )}\n            <button \n              onClick={() => {\n                setCurrentConversationId(null);\n                setMessages([]);\n              }}\n              className=\"btn btn-outline-primary btn-sm ms-2\"\n              title=\"새 대화 시작\"\n            >\n              ➕ 새 대화\n            </button>\n          </div>\n        </div>\n\n        {/* 채팅 메시지 영역 */}\n        <div className=\"chat-messages\" id=\"chat-messages\">\n          <div className=\"chat-box\">\n            {/* 추천 질문 카드들 (첫 대화 전만 표시) */}\n            {messages.length === 0 && !currentConversationId && (\n              <div className=\"suggest-section\">\n                <h3>💡 추천 질문</h3>\n                <div className=\"suggest-cards\">\n                  {suggestedQuestions.map((category, categoryIndex) => (\n                    <div key={categoryIndex} className=\"suggest-category\">\n                      <h4>{category.title}</h4>\n                      <div className=\"suggest-cards-grid\">\n                        {category.questions.map((question, questionIndex) => (\n                          <div \n                            key={questionIndex}\n                            className=\"suggest-card\" \n                            onClick={() => handleSuggestedQuestion(question)}\n                          >\n                            {question}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* 메시지들 */}\n            {messages.map((msg, idx) => (\n              <div key={idx} className={`message ${msg.role === 'user' ? 'message-user' : 'message-ai'}`}>\n                <div className=\"message-content\">\n                  <div className=\"message-header\">\n                    <span className=\"message-role\">\n                      {msg.role === 'user' ? '👤 사용자' : '🤖 AI'}\n                    </span>\n                    <span className=\"message-time\">{msg.timestamp}</span>\n                  </div>\n                  \n                  <div className=\"message-body\">\n                    {msg.role === 'user' ? (\n                      <div className=\"user-message\">{msg.content}</div>\n                    ) : (\n                      <div className=\"ai-message-card\">\n                        {msg.content && (\n                          <div className=\"ai-response-section\">\n                            <ReactMarkdown>{msg.content}</ReactMarkdown>\n                          </div>\n                        )}\n                        {msg.sql && (\n                          <div className=\"sql-section\">\n                            <div className=\"section-header\">\n                              <strong>🔍 생성된 SQL</strong>\n                              <button onClick={() => navigator.clipboard.writeText(msg.sql)} className=\"btn-copy\">복사</button>\n                            </div>\n                            <pre><code>{msg.sql}</code></pre>\n                          </div>\n                        )}\n                        {msg.result && (\n                          <div className=\"result-section\">\n                            <div className=\"section-header\">\n                              <strong>📊 쿼리 결과</strong>\n                            </div>\n                            <div className=\"result-table-container\">\n                              {Array.isArray(msg.result) && msg.result.length > 0 ? (\n                                <table className=\"result-table\">\n                                  <thead>\n                                    <tr>\n                                      {Object.keys(msg.result[0] || {}).map((key, i) => (\n                                        <th key={i}>{key}</th>\n                                      ))}\n                                    </tr>\n                                  </thead>\n                                  <tbody>\n                                    {msg.result.map((row, i) => (\n                                      <tr key={i}>\n                                        {Object.values(row).map((value, j) => (\n                                          <td key={j}>{String(value)}</td>\n                                        ))}\n                                      </tr>\n                                    ))}\n                                  </tbody>\n                                </table>\n                              ) : (\n                                <div className=\"no-result\">\n                                  <p>결과가 없습니다.</p>\n                                  <pre><code>{JSON.stringify(msg.result, null, 2)}</code></pre>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                        {msg.error && (\n                          <div className=\"error-section\">\n                            <div className=\"alert alert-danger\">\n                              <strong>❌ 오류 발생</strong>\n                              <p>{msg.content}</p>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {/* 로딩 인디케이터 */}\n            {loading && (\n              <div className=\"message message-ai\">\n                <div className=\"message-content\">\n                  <div className=\"message-header\">\n                    <span className=\"message-role\">🤖 AI</span>\n                    <span className=\"message-time\">처리 중...</span>\n                  </div>\n                  <div className=\"message-body\">\n                    <div className=\"loading-indicator\">\n                      <div className=\"spinner\"></div>\n                      <span>AI가 응답을 생성하고 있습니다...</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div ref={messagesEndRef} />\n          </div>\n        </div>\n\n        {/* 입력 영역 */}\n        <div className=\"chat-input-area\">\n          <div className=\"input-container\">\n            <textarea\n              ref={textareaRef}\n              value={input}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              placeholder=\"질문을 입력하세요... (Shift+Enter로 줄바꿈)\"\n              className=\"chat-input\"\n              rows={textareaRows}\n              disabled={loading || !selectedDb}\n            />\n            <button\n              onClick={handleSend}\n              disabled={loading || !input.trim() || !selectedDb}\n              className=\"send-button\"\n            >\n              {loading ? '⏳' : '📤'}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatComponent;\n"],"mappings":"oIAAA;AACA;AACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB,MAAO,CAAAC,aAAa,KAAM,gBAAgB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3C,QAAS,CAAAC,aAAaA,CAAAC,IAAA,CAAwC,KAAAC,gBAAA,IAAvC,CAAEC,UAAU,CAAEC,SAAS,CAAEC,UAAW,CAAC,CAAAJ,IAAA,CAC1D,KAAM,CAACK,QAAQ,CAAEC,WAAW,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACiB,KAAK,CAAEC,QAAQ,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACmB,OAAO,CAAEC,UAAU,CAAC,CAAGpB,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACqB,YAAY,CAAEC,eAAe,CAAC,CAAGtB,QAAQ,CAAC,CAAC,CAAC,CACnD,KAAM,CAAAuB,cAAc,CAAGrB,MAAM,CAAC,IAAI,CAAC,CACnC,KAAM,CAAAsB,WAAW,CAAGtB,MAAM,CAAC,IAAI,CAAC,CAEhC,KAAM,CAACuB,QAAQ,CAAEC,WAAW,CAAC,CAAG1B,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAAC2B,eAAe,CAAEC,kBAAkB,CAAC,CAAG5B,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAAC6B,QAAQ,CAAEC,WAAW,CAAC,CAAG9B,QAAQ,CAAC,IAAI,CAAC,CAAE;AAEhD,KAAM,CAAC+B,aAAa,CAAEC,gBAAgB,CAAC,CAAGhC,QAAQ,CAAC,EAAE,CAAC,CAAE;AACxD,KAAM,CAACiC,qBAAqB,CAAEC,wBAAwB,CAAC,CAAGlC,QAAQ,CAAC,IAAI,CAAC,CAAE;AAE1E;AACA,KAAM,CAAAmC,kBAAkB,CAAG,CACzB,CACEC,KAAK,CAAE,OAAO,CACdC,SAAS,CAAE,CACT,oBAAoB,CACpB,iBAAiB,CACjB,oBAAoB,CAExB,CAAC,CACD,CACED,KAAK,CAAE,QAAQ,CACfC,SAAS,CAAE,CACT,oBAAoB,CACpB,oBAAoB,CACpB,mBAAmB,CAEvB,CAAC,CACD,CACED,KAAK,CAAE,QAAQ,CACfC,SAAS,CAAE,CACT,cAAc,CACd,oBAAoB,CACpB,iBAAiB,CAErB,CAAC,CACF,CAED;AACA,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,KAAAC,qBAAA,CAC3B,CAAAA,qBAAA,CAAAhB,cAAc,CAACiB,OAAO,UAAAD,qBAAA,iBAAtBA,qBAAA,CAAwBE,cAAc,CAAC,CAAEC,QAAQ,CAAE,QAAS,CAAC,CAAC,CAChE,CAAC,CAEDzC,SAAS,CAAC,IAAM,CACdqC,cAAc,CAAC,CAAC,CAClB,CAAC,CAAE,CAACvB,QAAQ,CAAC,CAAC,CAEd;AACAd,SAAS,CAAC,IAAM,CACd,KAAM,CAAA0C,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI/B,UAAU,CAAE,CACd,GAAI,CACF,KAAM,CAAAgC,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAAC0C,GAAG,+BAAAC,MAAA,CAA+BlC,UAAU,CAAE,CAAC,CAC5E,GAAIgC,QAAQ,CAACG,IAAI,CAACC,MAAM,GAAK,SAAS,CAAE,CACtC,KAAM,CAAAjB,aAAa,CAAGa,QAAQ,CAACG,IAAI,CAAChB,aAAa,CACjDC,gBAAgB,CAACD,aAAa,CAAC,CAC/B,GAAIA,aAAa,CAACkB,MAAM,CAAG,CAAC,CAAE,CAC5B;AACAf,wBAAwB,CAACH,aAAa,CAAC,CAAC,CAAC,CAACmB,EAAE,CAAC,CAC/C,CAAC,IAAM,CACL;AACAhB,wBAAwB,CAAC,IAAI,CAAC,CAC9BlB,WAAW,CAAC,EAAE,CAAC,CACjB,CACF,CACF,CAAE,MAAOmC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5CnB,gBAAgB,CAAC,EAAE,CAAC,CACtB,CACF,CAAC,IAAM,CACLA,gBAAgB,CAAC,EAAE,CAAC,CACpBE,wBAAwB,CAAC,IAAI,CAAC,CAC9BlB,WAAW,CAAC,EAAE,CAAC,CACjB,CACF,CAAC,CAED2B,kBAAkB,CAAC,CAAC,CACtB,CAAC,CAAE,CAAC/B,UAAU,CAAC,CAAC,CAEhB;AACAX,SAAS,CAAC,IAAM,CACd,KAAM,CAAAoD,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAIzC,UAAU,EAAIA,UAAU,GAAK,aAAa,CAAE,CAC9C,GAAI,CACF,KAAM,CAAAgC,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAAC0C,GAAG,gBAAAC,MAAA,CAAgBlC,UAAU,CAAE,CAAC,CAC7D,GAAIgC,QAAQ,CAACG,IAAI,CAACC,MAAM,GAAK,SAAS,CAAE,CACtClB,WAAW,CAACc,QAAQ,CAACG,IAAI,CAACO,MAAM,CAAC,CACjCF,OAAO,CAACG,GAAG,CAAC,kBAAkB,CAAEX,QAAQ,CAACG,IAAI,CAACO,MAAM,CAAC,CACvD,CACF,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChDrB,WAAW,CAAC,IAAI,CAAC,CACnB,CACF,CAAC,IAAM,CACLA,WAAW,CAAC,IAAI,CAAC,CACnB,CACF,CAAC,CAEDuB,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,CAACzC,UAAU,CAAC,CAAC,CAEhB;AACAX,SAAS,CAAC,IAAM,CACd,KAAM,CAAAuD,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAIvB,qBAAqB,CAAE,CACzB,GAAI,CACF,KAAM,CAAAW,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAAC0C,GAAG,uBAAAC,MAAA,CAAuBb,qBAAqB,aAAW,CAAC,CACxF,GAAIW,QAAQ,CAACG,IAAI,CAACC,MAAM,GAAK,SAAS,CAAE,CACtC;AACA,KAAM,CAAAS,iBAAiB,CAAGb,QAAQ,CAACG,IAAI,CAAChC,QAAQ,CAAC2C,GAAG,CAACC,GAAG,GAAK,CAC3DC,IAAI,CAAED,GAAG,CAACC,IAAI,CACdC,OAAO,CAAEF,GAAG,CAACE,OAAO,CACpBC,GAAG,CAAEH,GAAG,CAACI,SAAS,CAClBC,MAAM,CAAEL,GAAG,CAACM,UAAU,CAAGC,IAAI,CAACC,KAAK,CAACR,GAAG,CAACM,UAAU,CAAC,CAAG,IAAI,CAC1DG,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACV,GAAG,CAACS,SAAS,CAAC,CAACE,kBAAkB,CAAC,CACxD,CAAC,CAAC,CAAC,CACHtD,WAAW,CAACyC,iBAAiB,CAAC,CAChC,CACF,CAAE,MAAON,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC1CnC,WAAW,CAAC,EAAE,CAAC,CACjB,CACF,CAAC,IAAM,CACLA,WAAW,CAAC,EAAE,CAAC,CACjB,CACF,CAAC,CACDwC,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,CAACvB,qBAAqB,CAAC,CAAC,CAE3B;AACAhC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAsE,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAArE,KAAK,CAAC0C,GAAG,CAAC,kBAAkB,CAAC,CACrD,KAAM,CAAA4B,cAAc,CAAG,KAAM,CAAAtE,KAAK,CAAC0C,GAAG,CAAC,2BAA2B,CAAC,CACnE,KAAM,CAAA6B,SAAS,CAAG,KAAM,CAAAvE,KAAK,CAAC0C,GAAG,CAAC,qBAAqB,CAAC,CACxD,KAAM,CAAA8B,SAAS,CAAG,KAAM,CAAAxE,KAAK,CAAC0C,GAAG,CAAC,qBAAqB,CAAC,CAExD,KAAM,CAAA+B,SAAS,CAAG,CAChB,GAAGJ,SAAS,CAACzB,IAAI,CAAC8B,IAAI,CAACnB,GAAG,CAACoB,CAAC,EAAAC,aAAA,CAAAA,aAAA,IAAUD,CAAC,MAAEE,IAAI,CAAE,QAAQ,EAAG,CAAC,CAC3D,GAAGP,cAAc,CAAC1B,IAAI,CAACkC,OAAO,CAACvB,GAAG,CAACwB,CAAC,EAAAH,aAAA,CAAAA,aAAA,IAAUG,CAAC,MAAEF,IAAI,CAAE,cAAc,EAAG,CAAC,CACzE,GAAGN,SAAS,CAAC3B,IAAI,CAACkC,OAAO,CAACvB,GAAG,CAACwB,CAAC,EAAAH,aAAA,CAAAA,aAAA,IAAUG,CAAC,MAAEF,IAAI,CAAE,QAAQ,EAAG,CAAC,CAC9D,GAAGL,SAAS,CAAC5B,IAAI,CAACkC,OAAO,CAACvB,GAAG,CAACwB,CAAC,EAAAH,aAAA,CAAAA,aAAA,IAAUG,CAAC,MAAEF,IAAI,CAAE,QAAQ,EAAG,CAAC,CAC/D,CACDtD,WAAW,CAACkD,SAAS,CAAC,CAEtB,KAAM,CAAAO,eAAe,CAAGP,SAAS,CAACQ,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,WAAW,CAAC,CAC1D,GAAIH,eAAe,CAAE,CACnBvD,kBAAkB,CAACuD,eAAe,CAACI,IAAI,CAAC,CAC1C,CAAC,IAAM,IAAIX,SAAS,CAAC3B,MAAM,CAAG,CAAC,CAAE,CAC/B,KAAM,CAAAuC,YAAY,CAAGZ,SAAS,CAAC,CAAC,CAAC,CACjC,GAAI,CAAAa,iBAAiB,CAAG,EAAE,CAC1B,GAAID,YAAY,CAACR,IAAI,GAAK,QAAQ,CAAES,iBAAiB,CAAG,oBAAoB,CAAC,IACxE,IAAID,YAAY,CAACR,IAAI,GAAK,cAAc,CAAES,iBAAiB,CAAG,0BAA0B,CAAC,IACzF,IAAID,YAAY,CAACR,IAAI,GAAK,QAAQ,CAAES,iBAAiB,CAAG,oBAAoB,CAAC,IAC7E,IAAID,YAAY,CAACR,IAAI,GAAK,QAAQ,CAAES,iBAAiB,CAAG,oBAAoB,CAEjF,GAAIA,iBAAiB,CAAE,CACrB,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEJ,YAAY,CAACD,IAAI,CAAC,CAC1CpF,KAAK,CAAC0F,IAAI,CAACJ,iBAAiB,CAAEC,QAAQ,CAAC,CACpCI,IAAI,CAAC,IAAM,CACVlE,kBAAkB,CAAC4D,YAAY,CAACD,IAAI,CAAC,CACrCnC,OAAO,CAACG,GAAG,+BAAAT,MAAA,CAA+B0C,YAAY,CAACD,IAAI,CAAE,CAAC,CAChE,CAAC,CAAC,CACDQ,KAAK,CAAC5C,KAAK,EAAI,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CAC3D,CAAC,CAAC,CACN,CACF,CAEF,CAAE,MAAOA,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACnD,CACF,CAAC,CACDoB,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAyB,kBAAkB,CAAIC,EAAE,EAAK,CACjCA,EAAE,CAACC,KAAK,CAACC,MAAM,CAAG,MAAM,CACxB,KAAM,CAAAC,SAAS,CAAGC,IAAI,CAACC,GAAG,CAACL,EAAE,CAACM,YAAY,CAAE,GAAG,CAAC,CAAE;AAClDN,EAAE,CAACC,KAAK,CAACC,MAAM,CAAGC,SAAS,CAAG,IAAI,CAClC9E,eAAe,CAAC+E,IAAI,CAACG,IAAI,CAACJ,SAAS,CAAG,EAAE,CAAC,CAAC,CAC5C,CAAC,CAED;AACA,KAAM,CAAAK,uBAAuB,CAAIC,QAAQ,EAAK,KAAAC,oBAAA,CAC5CzF,QAAQ,CAACwF,QAAQ,CAAC,CAClB,CAAAC,oBAAA,CAAAnF,WAAW,CAACgB,OAAO,UAAAmE,oBAAA,iBAAnBA,oBAAA,CAAqBC,KAAK,CAAC,CAAC,CAC9B,CAAC,CAED;AACA,KAAM,CAAAC,oBAAoB,CAAIvD,MAAM,EAAK,CACvC,GAAI,CAAAwD,MAAM,CAAG,EAAE,CAEf;AACAA,MAAM,gDAAAhE,MAAA,CAAeQ,MAAM,CAACyD,MAAM,CAAC9D,MAAM,uEAAmB,CAE5DK,MAAM,CAACyD,MAAM,CAACC,OAAO,CAACC,KAAK,EAAI,CAC7BH,MAAM,yBAAAhE,MAAA,CAAYmE,KAAK,CAAC1B,IAAI,CAAE,CAC9B,GAAI0B,KAAK,CAACC,OAAO,CAAE,CACjBJ,MAAM,OAAAhE,MAAA,CAASmE,KAAK,CAACC,OAAO,KAAG,CACjC,CACAJ,MAAM,EAAI,IAAI,CAEd;AACAA,MAAM,EAAI,SAAS,CACnBG,KAAK,CAACE,OAAO,CAACH,OAAO,CAACI,MAAM,EAAI,CAC9BN,MAAM,WAAAhE,MAAA,CAAasE,MAAM,CAAC7B,IAAI,OAAAzC,MAAA,CAAKsE,MAAM,CAACpC,IAAI,CAAE,CAChD,GAAIoC,MAAM,CAACC,UAAU,CAAE,CACrBP,MAAM,MAAAhE,MAAA,CAAQsE,MAAM,CAACC,UAAU,KAAG,CACpC,CACA,GAAID,MAAM,CAACE,SAAS,EAAIF,MAAM,CAACG,KAAK,CAAE,CACpCT,MAAM,MAAAhE,MAAA,CAAQsE,MAAM,CAACE,SAAS,MAAAxE,MAAA,CAAIsE,MAAM,CAACG,KAAK,KAAG,CACnD,CACA,GAAI,CAACH,MAAM,CAACI,QAAQ,CAAE,CACpBV,MAAM,EAAI,aAAa,CACzB,CACA,GAAIM,MAAM,CAACK,OAAO,CAAE,CAClBX,MAAM,2BAAAhE,MAAA,CAAcsE,MAAM,CAACK,OAAO,KAAG,CACvC,CACA,GAAIL,MAAM,CAACF,OAAO,CAAE,CAClBJ,MAAM,QAAAhE,MAAA,CAAUsE,MAAM,CAACF,OAAO,CAAE,CAClC,CACAJ,MAAM,EAAI,IAAI,CAChB,CAAC,CAAC,CAEF;AACA,GAAIG,KAAK,CAACS,OAAO,EAAIT,KAAK,CAACS,OAAO,CAACzE,MAAM,CAAG,CAAC,CAAE,CAC7C6D,MAAM,EAAI,UAAU,CACpBG,KAAK,CAACS,OAAO,CAACV,OAAO,CAACW,KAAK,EAAI,CAC7Bb,MAAM,WAAAhE,MAAA,CAAa6E,KAAK,CAACpC,IAAI,QAAAzC,MAAA,CAAM6E,KAAK,CAACR,OAAO,CAACS,IAAI,CAAC,IAAI,CAAC,KAAG,CAC9D,GAAID,KAAK,CAACE,MAAM,CAAE,CAChBf,MAAM,EAAI,WAAW,CACvB,CACA,GAAIa,KAAK,CAACG,OAAO,CAAE,CACjBhB,MAAM,EAAI,gBAAgB,CAC5B,CACAA,MAAM,EAAI,IAAI,CAChB,CAAC,CAAC,CACJ,CACAA,MAAM,EAAI,IAAI,CAChB,CAAC,CAAC,CAEF;AACA,GAAIxD,MAAM,CAACyE,aAAa,EAAIzE,MAAM,CAACyE,aAAa,CAAC9E,MAAM,CAAG,CAAC,CAAE,CAC3D6D,MAAM,EAAI,WAAW,CACrBxD,MAAM,CAACyE,aAAa,CAACf,OAAO,CAACgB,GAAG,EAAI,CAClClB,MAAM,OAAAhE,MAAA,CAASkF,GAAG,CAACf,KAAK,MAAAnE,MAAA,CAAIkF,GAAG,CAACZ,MAAM,SAAAtE,MAAA,CAAOkF,GAAG,CAACC,aAAa,MAAAnF,MAAA,CAAIkF,GAAG,CAACE,cAAc,MAAI,CAC1F,CAAC,CAAC,CACFpB,MAAM,EAAI,IAAI,CAChB,CAEA,MAAO,CAAAA,MAAM,CACf,CAAC,CAED;AACA,KAAM,CAAAqB,wBAAwB,CAAIC,MAAM,EAAK,CAC3ClG,wBAAwB,CAACkG,MAAM,CAAC,CAClC,CAAC,CAED;AACA,KAAM,CAAAC,wBAAwB,CAAG,KAAO,CAAAD,MAAM,EAAK,CACjD,GAAIE,MAAM,CAACC,OAAO,CAAC,0CAA0C,CAAC,CAAE,CAC9D,GAAI,CACF,KAAM,CAAApI,KAAK,CAACqI,MAAM,uBAAA1F,MAAA,CAAuBsF,MAAM,CAAE,CAAC,CAClD;AACA,KAAM,CAAAK,OAAO,CAAG,KAAM,CAAAtI,KAAK,CAAC0C,GAAG,+BAAAC,MAAA,CAA+BlC,UAAU,CAAE,CAAC,CAC3E,GAAI6H,OAAO,CAAC1F,IAAI,CAACC,MAAM,GAAK,SAAS,CAAE,CACrChB,gBAAgB,CAACyG,OAAO,CAAC1F,IAAI,CAAChB,aAAa,CAAC,CAC9C,CACA,GAAIE,qBAAqB,GAAKmG,MAAM,CAAE,CACpClG,wBAAwB,CAAC,IAAI,CAAC,CAC9BlB,WAAW,CAAC,EAAE,CAAC,CACjB,CACF,CAAE,MAAOmC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,WAAW,CAAEA,KAAK,CAAC,CACjCuF,KAAK,CAAC,gBAAgB,CAAC,CACzB,CACF,CACF,CAAC,CAED;AACA,KAAM,CAAAC,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAI,CAAC1H,KAAK,CAAC2H,IAAI,CAAC,CAAC,EAAI,CAAChI,UAAU,CAAE,OAElC,GAAI,CAACe,eAAe,CAAE,CACpB+G,KAAK,CAAC,uBAAuB,CAAC,CAC9B,OACF,CAEA,GAAI,CAAAG,cAAc,CAAG5G,qBAAqB,CAE1C;AACA,GAAI,CAAC4G,cAAc,CAAE,CACnB,GAAI,CACF,KAAM,CAAAC,eAAe,CAAG,KAAM,CAAA3I,KAAK,CAAC0F,IAAI,CAAC,wBAAwB,CAAE,GAAI,CAAAkD,eAAe,CAAC,CACrFC,OAAO,CAAEpI,UAAU,CACnBwB,KAAK,CAAEnB,KAAK,CAACgI,SAAS,CAAC,CAAC,CAAE,EAAE,CAAE;AAChC,CAAC,CAAC,CAAC,CACH,GAAIH,eAAe,CAAC/F,IAAI,CAACC,MAAM,GAAK,SAAS,CAAE,CAC7C6F,cAAc,CAAGC,eAAe,CAAC/F,IAAI,CAACmG,eAAe,CACrDhH,wBAAwB,CAAC2G,cAAc,CAAC,CACxC;AACA,KAAM,CAAAJ,OAAO,CAAG,KAAM,CAAAtI,KAAK,CAAC0C,GAAG,+BAAAC,MAAA,CAA+BlC,UAAU,CAAE,CAAC,CAC3E,GAAI6H,OAAO,CAAC1F,IAAI,CAACC,MAAM,GAAK,SAAS,CAAE,CACrChB,gBAAgB,CAACyG,OAAO,CAAC1F,IAAI,CAAChB,aAAa,CAAC,CAC9C,CACF,CAAC,IAAM,CACL,KAAM,IAAI,CAAAoH,KAAK,CAAC,mCAAmC,CAAC,CACtD,CACF,CAAE,MAAOhG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,aAAa,CAAEA,KAAK,CAAC,CACnCuF,KAAK,CAAC,qBAAqB,CAAC,CAC5B,OACF,CACF,CAEA,KAAM,CAAAU,WAAW,CAAG,CAClBxF,IAAI,CAAE,MAAM,CACZC,OAAO,CAAE5C,KAAK,CACdmD,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAC3C,CAAC,CACDtD,WAAW,CAACqI,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAED,WAAW,CAAC,CAAC,CAC3ChI,UAAU,CAAC,IAAI,CAAC,CAChBF,QAAQ,CAAC,EAAE,CAAC,CACZI,eAAe,CAAC,CAAC,CAAC,CAClB,GAAIE,WAAW,CAACgB,OAAO,CAAE,CACvBhB,WAAW,CAACgB,OAAO,CAAC0D,KAAK,CAACC,MAAM,CAAG,MAAM,CAC3C,CAEA,GAAI,CACF,KAAM,CAAAT,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,SAAS,CAAEhF,UAAU,CAAC,CAEtC;AACA,GAAI,CAAA0I,cAAc,CAAGrI,KAAK,CAC1B,GAAIY,QAAQ,EAAIA,QAAQ,CAACkF,MAAM,EAAIlF,QAAQ,CAACkF,MAAM,CAAC9D,MAAM,CAAG,CAAC,CAAE,CAC7D,KAAM,CAAAsG,UAAU,CAAG1C,oBAAoB,CAAChF,QAAQ,CAAC,CACjDyH,cAAc,4EAAAxG,MAAA,CAAuByG,UAAU,4CAAAzG,MAAA,CAAiB7B,KAAK,CAAE,CACzE,CAEAyE,QAAQ,CAACE,MAAM,CAAC,QAAQ,CAAE0D,cAAc,CAAC,CACzC5D,QAAQ,CAACE,MAAM,CAAC,iBAAiB,CAAEiD,cAAc,CAAC,CAAE;AAEpD,KAAM,CAAAjG,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAAC0F,IAAI,CAAC,aAAa,CAAEH,QAAQ,CAAC,CAE1D,GAAI9C,QAAQ,CAACG,IAAI,CAACC,MAAM,GAAK,SAAS,CAAE,CACtC,KAAM,CAAAD,IAAI,CAAGH,QAAQ,CAACG,IAAI,CAACyG,OAAO,CAClC,KAAM,CAAAC,gBAAgB,CAAG,CACvB7F,IAAI,CAAE,WAAW,CACjBC,OAAO,CAAEd,IAAI,CAACc,OAAO,EAAI,EAAE,CAC3BC,GAAG,CAAEf,IAAI,CAACe,GAAG,EAAI,EAAE,CACnBE,MAAM,CAAEjB,IAAI,CAACiB,MAAM,EAAI,IAAI,CAC3BI,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAC3C,CAAC,CACDtD,WAAW,CAACqI,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEI,gBAAgB,CAAC,CAAC,CAClD,CAAC,IAAM,CACL,KAAM,CAAAC,YAAY,CAAG,CACnB9F,IAAI,CAAE,WAAW,CACjBC,OAAO,CAAEjB,QAAQ,CAACG,IAAI,CAACI,KAAK,EAAI,cAAc,CAC9CA,KAAK,CAAE,IAAI,CACXiB,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAC3C,CAAC,CACDtD,WAAW,CAACqI,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEK,YAAY,CAAC,CAAC,CAC9C,CACF,CAAE,MAAOvG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,CAAEA,KAAK,CAAC,CACtC,KAAM,CAAAuG,YAAY,CAAG,CACnB9F,IAAI,CAAE,WAAW,CACjBC,OAAO,CAAE,4BAA4B,CACrCV,KAAK,CAAE,IAAI,CACXiB,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAC3C,CAAC,CACDtD,WAAW,CAACqI,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEK,YAAY,CAAC,CAAC,CAC9C,CAAC,OAAS,CACRtI,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED;AACA,KAAM,CAAAuI,aAAa,CAAIC,CAAC,EAAK,CAC3B,GAAIA,CAAC,CAACC,GAAG,GAAK,OAAO,EAAI,CAACD,CAAC,CAACE,QAAQ,CAAE,CACpCF,CAAC,CAACG,cAAc,CAAC,CAAC,CAClBpB,UAAU,CAAC,CAAC,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAqB,iBAAiB,CAAIJ,CAAC,EAAK,CAC/B1I,QAAQ,CAAC0I,CAAC,CAACK,MAAM,CAACC,KAAK,CAAC,CACxBlE,kBAAkB,CAAC4D,CAAC,CAACK,MAAM,CAAC,CAC9B,CAAC,CAED;AACA,KAAM,CAAAE,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CAAClI,qBAAqB,CAAE,OAE5B,GAAIqG,MAAM,CAACC,OAAO,CAAC,2BAA2B,CAAC,CAAE,CAC/C,GAAI,CACF,KAAM,CAAA7C,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,iBAAiB,CAAE3D,qBAAqB,CAAC,CACzD,KAAM,CAAAW,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAAC0F,IAAI,CAAC,mBAAmB,CAAEH,QAAQ,CAAC,CAEhE,GAAI9C,QAAQ,CAACG,IAAI,CAACC,MAAM,GAAK,SAAS,CAAE,CACtChC,WAAW,CAAC,EAAE,CAAC,CACf;AACA,KAAM,CAAAyH,OAAO,CAAG,KAAM,CAAAtI,KAAK,CAAC0C,GAAG,+BAAAC,MAAA,CAA+BlC,UAAU,CAAE,CAAC,CAC3E,GAAI6H,OAAO,CAAC1F,IAAI,CAACC,MAAM,GAAK,SAAS,CAAE,CACrChB,gBAAgB,CAACyG,OAAO,CAAC1F,IAAI,CAAChB,aAAa,CAAC,CAC9C,CACF,CACF,CAAE,MAAOoB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,YAAY,CAAEA,KAAK,CAAC,CAClCuF,KAAK,CAAC,iBAAiB,CAAC,CAC1B,CACF,CACF,CAAC,CAED,mBACElI,KAAA,QAAK4J,SAAS,CAAC,qBAAqB,CAAAC,QAAA,eAElC7J,KAAA,QAAK4J,SAAS,CAAC,sBAAsB,CAAAC,QAAA,eACnC7J,KAAA,QAAK4J,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7B/J,IAAA,OAAA+J,QAAA,CAAI,wCAAQ,CAAI,CAAC,cACjB/J,IAAA,WACE8J,SAAS,CAAC,wBAAwB,CAClCE,OAAO,CAAEA,CAAA,GAAM,CACbpI,wBAAwB,CAAC,IAAI,CAAC,CAC9BlB,WAAW,CAAC,EAAE,CAAC,CACjB,CAAE,CACFoB,KAAK,CAAC,kCAAS,CAAAiI,QAAA,CAChB,4BAED,CAAQ,CAAC,EACN,CAAC,cAEN/J,IAAA,QAAK8J,SAAS,CAAC,6BAA6B,CAAAC,QAAA,CACzCtI,aAAa,CAACkB,MAAM,GAAK,CAAC,cACzBzC,KAAA,QAAK4J,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC/B/J,IAAA,MAAA+J,QAAA,CAAG,2DAAY,CAAG,CAAC,cACnB/J,IAAA,MAAA+J,QAAA,CAAG,iEAAa,CAAG,CAAC,EACjB,CAAC,cAEN/J,IAAA,OAAI8J,SAAS,CAAC,8BAA8B,CAAAC,QAAA,CACzCtI,aAAa,CAAC2B,GAAG,CAAC6G,IAAI,eACrB/J,KAAA,OAEE4J,SAAS,sBAAAtH,MAAA,CAAuBb,qBAAqB,GAAKsI,IAAI,CAACrH,EAAE,CAAG,QAAQ,CAAG,EAAE,CAAG,CACpFoH,OAAO,CAAEA,CAAA,GAAMnC,wBAAwB,CAACoC,IAAI,CAACrH,EAAE,CAAE,CAAAmH,QAAA,eAEjD7J,KAAA,QAAK4J,SAAS,CAAC,sBAAsB,CAAAC,QAAA,eACnC/J,IAAA,QAAK8J,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAChCE,IAAI,CAACnI,KAAK,EAAI,OAAO,CACnB,CAAC,cACN9B,IAAA,QAAK8J,SAAS,CAAC,mBAAmB,CAAAC,QAAA,cAChC/J,IAAA,UAAA+J,QAAA,CAAQ,GAAI,CAAAhG,IAAI,CAACkG,IAAI,CAACC,UAAU,CAAC,CAACC,cAAc,CAAC,CAAC,CAAQ,CAAC,CACxD,CAAC,EACH,CAAC,cACNnK,IAAA,WACE8J,SAAS,CAAC,0CAA0C,CACpDE,OAAO,CAAGV,CAAC,EAAK,CACdA,CAAC,CAACc,eAAe,CAAC,CAAC,CACnBrC,wBAAwB,CAACkC,IAAI,CAACrH,EAAE,CAAC,CACnC,CAAE,CACFd,KAAK,CAAC,2BAAO,CAAAiI,QAAA,CACd,oBAED,CAAQ,CAAC,GArBJE,IAAI,CAACrH,EAsBR,CACL,CAAC,CACA,CACL,CACE,CAAC,EACH,CAAC,cAEN1C,KAAA,QAAK4J,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAE7B7J,KAAA,QAAK4J,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1B7J,KAAA,QAAK4J,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1B7J,KAAA,QAAK4J,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1B/J,IAAA,UAAOqK,OAAO,CAAC,WAAW,CAACP,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,iBAAK,CAAO,CAAC,cACjE7J,KAAA,WACE0C,EAAE,CAAC,WAAW,CACdgH,KAAK,CAAEtJ,UAAU,EAAI,EAAG,CACxBgK,QAAQ,CAAGhB,CAAC,EAAK9I,UAAU,CAAC8I,CAAC,CAACK,MAAM,CAACC,KAAK,CAAE,CAAAG,QAAA,eAE5C/J,IAAA,WAAQ4J,KAAK,CAAC,EAAE,CAAAG,QAAA,CAAC,yCAAS,CAAQ,CAAC,cACnC/J,IAAA,WAAQ4J,KAAK,CAAC,aAAa,CAAAG,QAAA,CAAC,iBAAK,CAAQ,CAAC,CACzCxJ,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAE6C,GAAG,CAACmH,EAAE,eAChBvK,IAAA,WAAsB4J,KAAK,CAAEW,EAAE,CAACtF,IAAK,CAAA8E,QAAA,CAClCQ,EAAE,CAACtF,IAAI,EADGsF,EAAE,CAACtF,IAER,CACT,CAAC,EACI,CAAC,EACN,CAAC,CAGL3E,UAAU,EAAIA,UAAU,GAAK,aAAa,eACzCJ,KAAA,QAAK4J,SAAS,CAAC,oBAAoB,CAAAC,QAAA,eACjC/J,IAAA,UAAO8J,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,iCAAM,CAAO,CAAC,cAC9C/J,IAAA,QAAK8J,SAAS,CAAC,kBAAkB,CAAAC,QAAA,CAC9BxI,QAAQ,cACPrB,KAAA,SAAM4J,SAAS,CAAC,eAAe,CAAAC,QAAA,EAAC,SAC5B,CAAC,EAAA1J,gBAAA,CAAAkB,QAAQ,CAACkF,MAAM,UAAApG,gBAAA,iBAAfA,gBAAA,CAAiBsC,MAAM,GAAI,CAAC,CAAC,8CAClC,EAAM,CAAC,cAEP3C,IAAA,SAAM8J,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CAAC,kDAEjC,CAAM,CACP,CACE,CAAC,EACH,CACN,cAGD7J,KAAA,QAAK4J,SAAS,CAAC,wBAAwB,CAAAC,QAAA,eACrC/J,IAAA,UAAOqK,OAAO,CAAC,iBAAiB,CAACP,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,8BAAQ,CAAO,CAAC,cAC1E7J,KAAA,WACE0C,EAAE,CAAC,iBAAiB,CACpBgH,KAAK,CAAEvI,eAAgB,CACvBiJ,QAAQ,CAAE,KAAO,CAAAhB,CAAC,EAAK,CACrB,KAAM,CAAAkB,SAAS,CAAGlB,CAAC,CAACK,MAAM,CAACC,KAAK,CAChC,KAAM,CAAAa,QAAQ,CAAGtJ,QAAQ,CAAC2D,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACE,IAAI,GAAKuF,SAAS,CAAC,CACzD,GAAIC,QAAQ,CAAE,CACZ,GAAI,CAAAtF,iBAAiB,CAAG,EAAE,CAC1B,GAAIsF,QAAQ,CAAC/F,IAAI,GAAK,QAAQ,CAAES,iBAAiB,CAAG,oBAAoB,CAAC,IACpE,IAAIsF,QAAQ,CAAC/F,IAAI,GAAK,cAAc,CAAES,iBAAiB,CAAG,0BAA0B,CAAC,IACrF,IAAIsF,QAAQ,CAAC/F,IAAI,GAAK,QAAQ,CAAES,iBAAiB,CAAG,oBAAoB,CAAC,IACzE,IAAIsF,QAAQ,CAAC/F,IAAI,GAAK,QAAQ,CAAES,iBAAiB,CAAG,oBAAoB,CAE7E,GAAIA,iBAAiB,CAAE,CACrB,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEmF,QAAQ,CAACxF,IAAI,CAAC,CACtC,KAAM,CAAApF,KAAK,CAAC0F,IAAI,CAACJ,iBAAiB,CAAEC,QAAQ,CAAC,CAC7C9D,kBAAkB,CAACmJ,QAAQ,CAACxF,IAAI,CAAC,CACjCmD,KAAK,IAAA5F,MAAA,CAAIiI,QAAQ,CAACxF,IAAI,sEAAkB,CAAC,CAC3C,CAAE,MAAOpC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjDuF,KAAK,CAAC,mBAAmB,CAAC,CAC5B,CACF,CACF,CACF,CAAE,CAAA2B,QAAA,eAEF/J,IAAA,WAAQ4J,KAAK,CAAC,EAAE,CAAAG,QAAA,CAAC,8BAAQ,CAAQ,CAAC,CACjC5I,QAAQ,CAACiC,GAAG,CAACsH,KAAK,eACjBxK,KAAA,WAAyB0J,KAAK,CAAEc,KAAK,CAACzF,IAAK,CAAA8E,QAAA,EACxCW,KAAK,CAACzF,IAAI,CAAC,IAAE,CAACyF,KAAK,CAAChG,IAAI,CAAC,GAC5B,GAFagG,KAAK,CAACzF,IAEX,CACT,CAAC,EACI,CAAC,EACN,CAAC,EAEH,CAAC,cAEN/E,KAAA,QAAK4J,SAAS,CAAC,gBAAgB,CAAAC,QAAA,EAC5BpI,qBAAqB,eACpB3B,IAAA,WACEgK,OAAO,CAAEH,eAAgB,CACzBC,SAAS,CAAC,gCAAgC,CAC1ChI,KAAK,CAAC,8CAAW,CAAAiI,QAAA,CAClB,iCAED,CAAQ,CACT,cACD/J,IAAA,WACEgK,OAAO,CAAEA,CAAA,GAAM,CACbpI,wBAAwB,CAAC,IAAI,CAAC,CAC9BlB,WAAW,CAAC,EAAE,CAAC,CACjB,CAAE,CACFoJ,SAAS,CAAC,qCAAqC,CAC/ChI,KAAK,CAAC,kCAAS,CAAAiI,QAAA,CAChB,4BAED,CAAQ,CAAC,EACN,CAAC,EACH,CAAC,cAGN/J,IAAA,QAAK8J,SAAS,CAAC,eAAe,CAAClH,EAAE,CAAC,eAAe,CAAAmH,QAAA,cAC/C7J,KAAA,QAAK4J,SAAS,CAAC,UAAU,CAAAC,QAAA,EAEtBtJ,QAAQ,CAACkC,MAAM,GAAK,CAAC,EAAI,CAAChB,qBAAqB,eAC9CzB,KAAA,QAAK4J,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9B/J,IAAA,OAAA+J,QAAA,CAAI,wCAAQ,CAAI,CAAC,cACjB/J,IAAA,QAAK8J,SAAS,CAAC,eAAe,CAAAC,QAAA,CAC3BlI,kBAAkB,CAACuB,GAAG,CAAC,CAACuH,QAAQ,CAAEC,aAAa,gBAC9C1K,KAAA,QAAyB4J,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eACnD/J,IAAA,OAAA+J,QAAA,CAAKY,QAAQ,CAAC7I,KAAK,CAAK,CAAC,cACzB9B,IAAA,QAAK8J,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAChCY,QAAQ,CAAC5I,SAAS,CAACqB,GAAG,CAAC,CAACgD,QAAQ,CAAEyE,aAAa,gBAC9C7K,IAAA,QAEE8J,SAAS,CAAC,cAAc,CACxBE,OAAO,CAAEA,CAAA,GAAM7D,uBAAuB,CAACC,QAAQ,CAAE,CAAA2D,QAAA,CAEhD3D,QAAQ,EAJJyE,aAKF,CACN,CAAC,CACC,CAAC,GAZED,aAaL,CACN,CAAC,CACC,CAAC,EACH,CACN,CAGAnK,QAAQ,CAAC2C,GAAG,CAAC,CAACC,GAAG,CAAEyH,GAAG,gBACrB9K,IAAA,QAAe8J,SAAS,YAAAtH,MAAA,CAAaa,GAAG,CAACC,IAAI,GAAK,MAAM,CAAG,cAAc,CAAG,YAAY,CAAG,CAAAyG,QAAA,cACzF7J,KAAA,QAAK4J,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9B7J,KAAA,QAAK4J,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7B/J,IAAA,SAAM8J,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC3B1G,GAAG,CAACC,IAAI,GAAK,MAAM,CAAG,QAAQ,CAAG,OAAO,CACrC,CAAC,cACPtD,IAAA,SAAM8J,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAE1G,GAAG,CAACS,SAAS,CAAO,CAAC,EAClD,CAAC,cAEN9D,IAAA,QAAK8J,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC1B1G,GAAG,CAACC,IAAI,GAAK,MAAM,cAClBtD,IAAA,QAAK8J,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAE1G,GAAG,CAACE,OAAO,CAAM,CAAC,cAEjDrD,KAAA,QAAK4J,SAAS,CAAC,iBAAiB,CAAAC,QAAA,EAC7B1G,GAAG,CAACE,OAAO,eACVvD,IAAA,QAAK8J,SAAS,CAAC,qBAAqB,CAAAC,QAAA,cAClC/J,IAAA,CAACF,aAAa,EAAAiK,QAAA,CAAE1G,GAAG,CAACE,OAAO,CAAgB,CAAC,CACzC,CACN,CACAF,GAAG,CAACG,GAAG,eACNtD,KAAA,QAAK4J,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1B7J,KAAA,QAAK4J,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7B/J,IAAA,WAAA+J,QAAA,CAAQ,qCAAU,CAAQ,CAAC,cAC3B/J,IAAA,WAAQgK,OAAO,CAAEA,CAAA,GAAMe,SAAS,CAACC,SAAS,CAACC,SAAS,CAAC5H,GAAG,CAACG,GAAG,CAAE,CAACsG,SAAS,CAAC,UAAU,CAAAC,QAAA,CAAC,cAAE,CAAQ,CAAC,EAC5F,CAAC,cACN/J,IAAA,QAAA+J,QAAA,cAAK/J,IAAA,SAAA+J,QAAA,CAAO1G,GAAG,CAACG,GAAG,CAAO,CAAC,CAAK,CAAC,EAC9B,CACN,CACAH,GAAG,CAACK,MAAM,eACTxD,KAAA,QAAK4J,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7B/J,IAAA,QAAK8J,SAAS,CAAC,gBAAgB,CAAAC,QAAA,cAC7B/J,IAAA,WAAA+J,QAAA,CAAQ,wCAAQ,CAAQ,CAAC,CACtB,CAAC,cACN/J,IAAA,QAAK8J,SAAS,CAAC,wBAAwB,CAAAC,QAAA,CACpCmB,KAAK,CAACC,OAAO,CAAC9H,GAAG,CAACK,MAAM,CAAC,EAAIL,GAAG,CAACK,MAAM,CAACf,MAAM,CAAG,CAAC,cACjDzC,KAAA,UAAO4J,SAAS,CAAC,cAAc,CAAAC,QAAA,eAC7B/J,IAAA,UAAA+J,QAAA,cACE/J,IAAA,OAAA+J,QAAA,CACGqB,MAAM,CAAC7G,IAAI,CAAClB,GAAG,CAACK,MAAM,CAAC,CAAC,CAAC,EAAI,CAAC,CAAC,CAAC,CAACN,GAAG,CAAC,CAACmG,GAAG,CAAE8B,CAAC,gBAC3CrL,IAAA,OAAA+J,QAAA,CAAaR,GAAG,EAAP8B,CAAY,CACtB,CAAC,CACA,CAAC,CACA,CAAC,cACRrL,IAAA,UAAA+J,QAAA,CACG1G,GAAG,CAACK,MAAM,CAACN,GAAG,CAAC,CAACkI,GAAG,CAAED,CAAC,gBACrBrL,IAAA,OAAA+J,QAAA,CACGqB,MAAM,CAACG,MAAM,CAACD,GAAG,CAAC,CAAClI,GAAG,CAAC,CAACwG,KAAK,CAAE4B,CAAC,gBAC/BxL,IAAA,OAAA+J,QAAA,CAAa0B,MAAM,CAAC7B,KAAK,CAAC,EAAjB4B,CAAsB,CAChC,CAAC,EAHKH,CAIL,CACL,CAAC,CACG,CAAC,EACH,CAAC,cAERnL,KAAA,QAAK4J,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxB/J,IAAA,MAAA+J,QAAA,CAAG,8CAAS,CAAG,CAAC,cAChB/J,IAAA,QAAA+J,QAAA,cAAK/J,IAAA,SAAA+J,QAAA,CAAOnG,IAAI,CAAC8H,SAAS,CAACrI,GAAG,CAACK,MAAM,CAAE,IAAI,CAAE,CAAC,CAAC,CAAO,CAAC,CAAK,CAAC,EAC1D,CACN,CACE,CAAC,EACH,CACN,CACAL,GAAG,CAACR,KAAK,eACR7C,IAAA,QAAK8J,SAAS,CAAC,eAAe,CAAAC,QAAA,cAC5B7J,KAAA,QAAK4J,SAAS,CAAC,oBAAoB,CAAAC,QAAA,eACjC/J,IAAA,WAAA+J,QAAA,CAAQ,kCAAO,CAAQ,CAAC,cACxB/J,IAAA,MAAA+J,QAAA,CAAI1G,GAAG,CAACE,OAAO,CAAI,CAAC,EACjB,CAAC,CACH,CACN,EACE,CACN,CACE,CAAC,EACH,CAAC,EAzEEuH,GA0EL,CACN,CAAC,CAGDjK,OAAO,eACNb,IAAA,QAAK8J,SAAS,CAAC,oBAAoB,CAAAC,QAAA,cACjC7J,KAAA,QAAK4J,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9B7J,KAAA,QAAK4J,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7B/J,IAAA,SAAM8J,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,iBAAK,CAAM,CAAC,cAC3C/J,IAAA,SAAM8J,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,wBAAO,CAAM,CAAC,EAC1C,CAAC,cACN/J,IAAA,QAAK8J,SAAS,CAAC,cAAc,CAAAC,QAAA,cAC3B7J,KAAA,QAAK4J,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAChC/J,IAAA,QAAK8J,SAAS,CAAC,SAAS,CAAM,CAAC,cAC/B9J,IAAA,SAAA+J,QAAA,CAAM,kFAAoB,CAAM,CAAC,EAC9B,CAAC,CACH,CAAC,EACH,CAAC,CACH,CACN,cAED/J,IAAA,QAAK2L,GAAG,CAAE1K,cAAe,CAAE,CAAC,EACzB,CAAC,CACH,CAAC,cAGNjB,IAAA,QAAK8J,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9B7J,KAAA,QAAK4J,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9B/J,IAAA,aACE2L,GAAG,CAAEzK,WAAY,CACjB0I,KAAK,CAAEjJ,KAAM,CACb2J,QAAQ,CAAEZ,iBAAkB,CAC5BkC,SAAS,CAAEvC,aAAc,CACzBwC,WAAW,CAAC,6FAAiC,CAC7C/B,SAAS,CAAC,YAAY,CACtBgC,IAAI,CAAE/K,YAAa,CACnBgL,QAAQ,CAAElL,OAAO,EAAI,CAACP,UAAW,CAClC,CAAC,cACFN,IAAA,WACEgK,OAAO,CAAE3B,UAAW,CACpB0D,QAAQ,CAAElL,OAAO,EAAI,CAACF,KAAK,CAAC2H,IAAI,CAAC,CAAC,EAAI,CAAChI,UAAW,CAClDwJ,SAAS,CAAC,aAAa,CAAAC,QAAA,CAEtBlJ,OAAO,CAAG,GAAG,CAAG,IAAI,CACf,CAAC,EACN,CAAC,CACH,CAAC,EACH,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAAV,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}